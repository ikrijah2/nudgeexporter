package nudgeexporter

import (
	"fmt"
	"io/ioutil"
	"log"
	"strconv"

	"github.com/ikrijah2/nudge/rawdata"
)

func sqlToRawdata(traces AutoGenerated, rd *rawdata.RawData) {
	//TODO
	// enum Type {
	// TRANSACTION = 0;
	// SUB_TRANSACTION = 1;
	// SQL_REQUEST = 2;
	// // du rawdata
	// var TransactionType *rawdata.Transaction_Type
	// TransactionTypeisSqlRequest := 2
	// TransactionType = &TransactionTypeisSqlRequest

	uuid, err := ioutil.ReadFile("uuid")
	if err != nil {
		log.Fatalln("Error reading file:", err)
	}

	uuidStr := string(uuid)
	uuidPtr := &uuidStr

	var Transactions []*rawdata.Transaction
	var SqlRequests []*rawdata.SqlRequest
	var Dictionary *rawdata.Dictionary

	for _, span := range traces.ResourceSpans[0].InstrumentationLibrarySpans[0].Spans {

		var DictionaryEntryTable []*rawdata.Dictionary_DictionaryEntry
		var SqlRequest rawdata.SqlRequest
		var Transaction rawdata.Transaction

		var StartTimePointer *int64 = TimeToInt64(span.StartTimeUnixNano)
		var EndTimePointer *int64 = TimeToInt64(span.EndTimeUnixNano)

		// Transaction.Type = TransactionType
		Transaction.StartTime = StartTimePointer
		Transaction.EndTime = EndTimePointer
		Transaction.Uuid = uuidPtr
		SqlRequest.StartTime = StartTimePointer
		SqlRequest.EndTime = EndTimePointer

		// var valueOne = 1
		// var SqlRequest_RequestType *rawdata.SqlRequest_RequestType = &valueOne
		// SqlRequest.RequestType = &SqlRequest_RequestType

		// Transaction.SqlRequest = SqlRequests
		var DictionaryEntry rawdata.Dictionary_DictionaryEntry

		for _, attribute := range span.Attributes {

			// TODO if attr.Key == "db.type"
			// TODO if attr.Key == "out.host" db location
			// TODO if attr.Key == "sql-query"
			if attribute.Key == "sql-query" {
				var SqlQuery *string = PtrCreateAndAssign(attribute.Value.StringValue)
				SqlRequest.Sql = SqlQuery

				DictionaryEntry.Name = SqlQuery

				var Id string = traces.ResourceSpans[0].Resource.Attributes[1].Value.StringValue
				Id64, err := strconv.ParseInt(Id, 10, 32)
				if err == nil {
					fmt.Printf("%d of type %T", Id64, Id64)
				}
				var IdPtr *int32
				var Id32 = int32(Id64)
				IdPtr = &Id32
				DictionaryEntry.Id = IdPtr
			}

			var SqlRequestPtr *rawdata.SqlRequest
			SqlRequestPtr = &SqlRequest
			SqlRequests = append(SqlRequests, SqlRequestPtr)

		}

		Transaction.SqlRequests = SqlRequests
		// On créé le pointeur qui va pointer sur Transaction
		var TransactionPtr *rawdata.Transaction
		TransactionPtr = &Transaction

		var DictionaryEntryPtr *rawdata.Dictionary_DictionaryEntry
		DictionaryEntryPtr = &DictionaryEntry

		// On ajoute la Transaction dans le tableau des Transactions
		Transactions = append(Transactions, TransactionPtr)
		DictionaryEntryTable = append(DictionaryEntryTable, DictionaryEntryPtr)

	}

	rd.Transactions = Transactions
	rd.QueryDictionary = Dictionary

}
