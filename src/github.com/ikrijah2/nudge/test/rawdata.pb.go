// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: rawdata.proto

package test

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_OK Status = 0
	Status_KO Status = 1
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "OK",
		1: "KO",
	}
	Status_value = map[string]int32{
		"OK": 0,
		"KO": 1,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rawdata_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_rawdata_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Status(num)
	return nil
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{0}
}

type ThreadInfo_State int32

const (
	ThreadInfo_NEW           ThreadInfo_State = 0
	ThreadInfo_RUNNABLE      ThreadInfo_State = 1
	ThreadInfo_BLOCKED       ThreadInfo_State = 2
	ThreadInfo_WAITING       ThreadInfo_State = 3
	ThreadInfo_TIMED_WAITING ThreadInfo_State = 4
	ThreadInfo_TERMINATED    ThreadInfo_State = 5
)

// Enum value maps for ThreadInfo_State.
var (
	ThreadInfo_State_name = map[int32]string{
		0: "NEW",
		1: "RUNNABLE",
		2: "BLOCKED",
		3: "WAITING",
		4: "TIMED_WAITING",
		5: "TERMINATED",
	}
	ThreadInfo_State_value = map[string]int32{
		"NEW":           0,
		"RUNNABLE":      1,
		"BLOCKED":       2,
		"WAITING":       3,
		"TIMED_WAITING": 4,
		"TERMINATED":    5,
	}
)

func (x ThreadInfo_State) Enum() *ThreadInfo_State {
	p := new(ThreadInfo_State)
	*p = x
	return p
}

func (x ThreadInfo_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThreadInfo_State) Descriptor() protoreflect.EnumDescriptor {
	return file_rawdata_proto_enumTypes[1].Descriptor()
}

func (ThreadInfo_State) Type() protoreflect.EnumType {
	return &file_rawdata_proto_enumTypes[1]
}

func (x ThreadInfo_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ThreadInfo_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ThreadInfo_State(num)
	return nil
}

// Deprecated: Use ThreadInfo_State.Descriptor instead.
func (ThreadInfo_State) EnumDescriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{7, 0}
}

type Transaction_Status int32

const (
	Transaction_OK Transaction_Status = 0
	Transaction_KO Transaction_Status = 1
)

// Enum value maps for Transaction_Status.
var (
	Transaction_Status_name = map[int32]string{
		0: "OK",
		1: "KO",
	}
	Transaction_Status_value = map[string]int32{
		"OK": 0,
		"KO": 1,
	}
)

func (x Transaction_Status) Enum() *Transaction_Status {
	p := new(Transaction_Status)
	*p = x
	return p
}

func (x Transaction_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rawdata_proto_enumTypes[2].Descriptor()
}

func (Transaction_Status) Type() protoreflect.EnumType {
	return &file_rawdata_proto_enumTypes[2]
}

func (x Transaction_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Transaction_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Transaction_Status(num)
	return nil
}

// Deprecated: Use Transaction_Status.Descriptor instead.
func (Transaction_Status) EnumDescriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{12, 0}
}

// Origine de la transaction
type Transaction_Type int32

const (
	Transaction_TRANSACTION     Transaction_Type = 0
	Transaction_SUB_TRANSACTION Transaction_Type = 1
	Transaction_SQL_REQUEST     Transaction_Type = 2
)

// Enum value maps for Transaction_Type.
var (
	Transaction_Type_name = map[int32]string{
		0: "TRANSACTION",
		1: "SUB_TRANSACTION",
		2: "SQL_REQUEST",
	}
	Transaction_Type_value = map[string]int32{
		"TRANSACTION":     0,
		"SUB_TRANSACTION": 1,
		"SQL_REQUEST":     2,
	}
)

func (x Transaction_Type) Enum() *Transaction_Type {
	p := new(Transaction_Type)
	*p = x
	return p
}

func (x Transaction_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_rawdata_proto_enumTypes[3].Descriptor()
}

func (Transaction_Type) Type() protoreflect.EnumType {
	return &file_rawdata_proto_enumTypes[3]
}

func (x Transaction_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Transaction_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Transaction_Type(num)
	return nil
}

// Deprecated: Use Transaction_Type.Descriptor instead.
func (Transaction_Type) EnumDescriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{12, 1}
}

type Transaction_ReqMethod int32

const (
	Transaction_CONNECT Transaction_ReqMethod = 0
	Transaction_DELETE  Transaction_ReqMethod = 1
	Transaction_GET     Transaction_ReqMethod = 2
	Transaction_HEAD    Transaction_ReqMethod = 3
	Transaction_OPTIONS Transaction_ReqMethod = 4
	Transaction_POST    Transaction_ReqMethod = 5
	Transaction_PUT     Transaction_ReqMethod = 6
	Transaction_TRACE   Transaction_ReqMethod = 7
)

// Enum value maps for Transaction_ReqMethod.
var (
	Transaction_ReqMethod_name = map[int32]string{
		0: "CONNECT",
		1: "DELETE",
		2: "GET",
		3: "HEAD",
		4: "OPTIONS",
		5: "POST",
		6: "PUT",
		7: "TRACE",
	}
	Transaction_ReqMethod_value = map[string]int32{
		"CONNECT": 0,
		"DELETE":  1,
		"GET":     2,
		"HEAD":    3,
		"OPTIONS": 4,
		"POST":    5,
		"PUT":     6,
		"TRACE":   7,
	}
)

func (x Transaction_ReqMethod) Enum() *Transaction_ReqMethod {
	p := new(Transaction_ReqMethod)
	*p = x
	return p
}

func (x Transaction_ReqMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_ReqMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_rawdata_proto_enumTypes[4].Descriptor()
}

func (Transaction_ReqMethod) Type() protoreflect.EnumType {
	return &file_rawdata_proto_enumTypes[4]
}

func (x Transaction_ReqMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Transaction_ReqMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Transaction_ReqMethod(num)
	return nil
}

// Deprecated: Use Transaction_ReqMethod.Descriptor instead.
func (Transaction_ReqMethod) EnumDescriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{12, 2}
}

type SqlRequest_RequestType int32

const (
	SqlRequest_JDBC  SqlRequest_RequestType = 0
	SqlRequest_CACHE SqlRequest_RequestType = 1
)

// Enum value maps for SqlRequest_RequestType.
var (
	SqlRequest_RequestType_name = map[int32]string{
		0: "JDBC",
		1: "CACHE",
	}
	SqlRequest_RequestType_value = map[string]int32{
		"JDBC":  0,
		"CACHE": 1,
	}
)

func (x SqlRequest_RequestType) Enum() *SqlRequest_RequestType {
	p := new(SqlRequest_RequestType)
	*p = x
	return p
}

func (x SqlRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_rawdata_proto_enumTypes[5].Descriptor()
}

func (SqlRequest_RequestType) Type() protoreflect.EnumType {
	return &file_rawdata_proto_enumTypes[5]
}

func (x SqlRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SqlRequest_RequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SqlRequest_RequestType(num)
	return nil
}

// Deprecated: Use SqlRequest_RequestType.Descriptor instead.
func (SqlRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{17, 0}
}

type JMSMessage_JMSType int32

const (
	JMSMessage_QUEUE JMSMessage_JMSType = 0
	JMSMessage_TOPIC JMSMessage_JMSType = 1
)

// Enum value maps for JMSMessage_JMSType.
var (
	JMSMessage_JMSType_name = map[int32]string{
		0: "QUEUE",
		1: "TOPIC",
	}
	JMSMessage_JMSType_value = map[string]int32{
		"QUEUE": 0,
		"TOPIC": 1,
	}
)

func (x JMSMessage_JMSType) Enum() *JMSMessage_JMSType {
	p := new(JMSMessage_JMSType)
	*p = x
	return p
}

func (x JMSMessage_JMSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JMSMessage_JMSType) Descriptor() protoreflect.EnumDescriptor {
	return file_rawdata_proto_enumTypes[6].Descriptor()
}

func (JMSMessage_JMSType) Type() protoreflect.EnumType {
	return &file_rawdata_proto_enumTypes[6]
}

func (x JMSMessage_JMSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *JMSMessage_JMSType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = JMSMessage_JMSType(num)
	return nil
}

// Deprecated: Use JMSMessage_JMSType.Descriptor instead.
func (JMSMessage_JMSType) EnumDescriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{18, 0}
}

type WSRequest_WSType int32

const (
	WSRequest_SOAP       WSRequest_WSType = 0
	WSRequest_REST       WSRequest_WSType = 1
	WSRequest_SOAPJAXRPC WSRequest_WSType = 2
)

// Enum value maps for WSRequest_WSType.
var (
	WSRequest_WSType_name = map[int32]string{
		0: "SOAP",
		1: "REST",
		2: "SOAPJAXRPC",
	}
	WSRequest_WSType_value = map[string]int32{
		"SOAP":       0,
		"REST":       1,
		"SOAPJAXRPC": 2,
	}
)

func (x WSRequest_WSType) Enum() *WSRequest_WSType {
	p := new(WSRequest_WSType)
	*p = x
	return p
}

func (x WSRequest_WSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WSRequest_WSType) Descriptor() protoreflect.EnumDescriptor {
	return file_rawdata_proto_enumTypes[7].Descriptor()
}

func (WSRequest_WSType) Type() protoreflect.EnumType {
	return &file_rawdata_proto_enumTypes[7]
}

func (x WSRequest_WSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WSRequest_WSType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WSRequest_WSType(num)
	return nil
}

// Deprecated: Use WSRequest_WSType.Descriptor instead.
func (WSRequest_WSType) EnumDescriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{19, 0}
}

type TroubleshootingEvents_EventType int32

const (
	TroubleshootingEvents_ConnectionLeak TroubleshootingEvents_EventType = 0
	TroubleshootingEvents_OutOfMemory    TroubleshootingEvents_EventType = 1
)

// Enum value maps for TroubleshootingEvents_EventType.
var (
	TroubleshootingEvents_EventType_name = map[int32]string{
		0: "ConnectionLeak",
		1: "OutOfMemory",
	}
	TroubleshootingEvents_EventType_value = map[string]int32{
		"ConnectionLeak": 0,
		"OutOfMemory":    1,
	}
)

func (x TroubleshootingEvents_EventType) Enum() *TroubleshootingEvents_EventType {
	p := new(TroubleshootingEvents_EventType)
	*p = x
	return p
}

func (x TroubleshootingEvents_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TroubleshootingEvents_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_rawdata_proto_enumTypes[8].Descriptor()
}

func (TroubleshootingEvents_EventType) Type() protoreflect.EnumType {
	return &file_rawdata_proto_enumTypes[8]
}

func (x TroubleshootingEvents_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TroubleshootingEvents_EventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TroubleshootingEvents_EventType(num)
	return nil
}

// Deprecated: Use TroubleshootingEvents_EventType.Descriptor instead.
func (TroubleshootingEvents_EventType) EnumDescriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{28, 0}
}

// DONNEE BRUTE
// Ce message constitue le protocole de communication entre
// les sondes et le portail nudge.
// Il est envoyé par la sonde dans le body d'un message HTTP
// de type PUT a destintation du portail
type RawData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// compteur de paquets envoyés par une meme sonde
	Id *int64 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// id unique produit par une sonde a son demarrage
	AgentId *string `protobuf:"bytes,2,req,name=agentId" json:"agentId,omitempty"`
	// informations de configuration serveur
	ServerConfig *ServerConfig `protobuf:"bytes,3,opt,name=serverConfig" json:"serverConfig,omitempty"`
	// Java: informations sur la heap (java)
	HeapMemory *HeapMemory `protobuf:"bytes,4,opt,name=heapMemory" json:"heapMemory,omitempty"`
	// Java: informations sur le GC (java)
	GcActivity *GcActivity `protobuf:"bytes,5,opt,name=gcActivity" json:"gcActivity,omitempty"`
	// Java: activite des threads
	ThreadActivity *ThreadActivity `protobuf:"bytes,6,opt,name=threadActivity" json:"threadActivity,omitempty"`
	// obsolete
	SessionActivity *SessionActivity `protobuf:"bytes,7,opt,name=sessionActivity" json:"sessionActivity,omitempty"`
	// liste des appels de transactions observees
	Transactions []*Transaction `protobuf:"bytes,8,rep,name=transactions" json:"transactions,omitempty"`
	// obsolete
	//
	// Deprecated: Do not use.
	Samples []*MethodCallSamplig `protobuf:"bytes,9,rep,name=samples" json:"samples,omitempty"`
	// obsolete
	//
	// Deprecated: Do not use.
	Metrics []*ItemMetric `protobuf:"bytes,10,rep,name=metrics" json:"metrics,omitempty"`
	// hostname
	Hostname *string `protobuf:"bytes,11,opt,name=hostname" json:"hostname,omitempty"`
	// cle d'identification de la sonde
	// combinee au hostname, cette cle doit etre unique pour identifier les
	// instances distinctes d'un meme service
	Hostkey *int64 `protobuf:"varint,12,opt,name=hostkey" json:"hostkey,omitempty"`
	// echantillonnage des threads
	ThreadInfos []*ThreadInfo `protobuf:"bytes,13,rep,name=threadInfos" json:"threadInfos,omitempty"`
	// liste des temps de reponse percus par l'utilisateur.
	// informations collectées via les cookies alimentés par
	// l'injection javascript dans les pages web
	EndUserTiming []string `protobuf:"bytes,14,rep,name=endUserTiming" json:"endUserTiming,omitempty"`
	// Java: echantillonnage JMX
	MBean []*MBean `protobuf:"bytes,15,rep,name=mBean" json:"mBean,omitempty"`
	// dictionnaire de segments,
	// cle: Transaction.urlId,
	// valeur: Transaction.url
	SegmentDictionary *Dictionary `protobuf:"bytes,16,opt,name=segmentDictionary" json:"segmentDictionary,omitempty"`
	// dictionnaire de requetes:
	// cle: SqlRequest.sqlId | SqlRequest.urlId,
	// valeur: SqlRequest.sql | SqlRequest.serverUrl,
	QueryDictionary *Dictionary `protobuf:"bytes,17,opt,name=queryDictionary" json:"queryDictionary,omitempty"`
	// dictionnaire de classes:
	// cle: StackTraceElement.classNameId,
	// valeur: StackTraceElement.className
	ClassDictionary *Dictionary `protobuf:"bytes,18,opt,name=classDictionary" json:"classDictionary,omitempty"`
	// dictionnaire de methodes:
	// cle: StackTraceElement.methodNameId,
	// valeur: StackTraceElement.methodName
	MethodDictionary *Dictionary `protobuf:"bytes,19,opt,name=methodDictionary" json:"methodDictionary,omitempty"`
	// dictionnaire de user-agent:
	// cle: Transaction.useragentId,
	// valeur: Transaction.userAgent
	UserAgent *Dictionary `protobuf:"bytes,20,opt,name=userAgent" json:"userAgent,omitempty"`
	// dictionnaire de mbean:
	// cle: MBeanAttributeInfo.descriptionId | MBeanAttributeInfo.typeId,
	// valeur: MBeanAttributeInfo.description | MBeanAttributeInfo.type
	MbeanDictionary *Dictionary `protobuf:"bytes,21,opt,name=mbeanDictionary" json:"mbeanDictionary,omitempty"`
	// dictionnaire d'appels jms:
	// cle: JMSMessage.queueId | JMSMessage.urlId,
	// valeur: JMSMessage.queueName | JMSMessage.urlName
	JmsDictionary *Dictionary `protobuf:"bytes,22,opt,name=jmsDictionary" json:"jmsDictionary,omitempty"`
	// evenements exceptionnels detectes par l'agent (ex: OOME en Java)
	TroubleshootingEvents []*TroubleshootingEvents `protobuf:"bytes,23,rep,name=troubleshootingEvents" json:"troubleshootingEvents,omitempty"`
	SystemMetrics         []*SystemMetricSample    `protobuf:"bytes,24,rep,name=systemMetrics" json:"systemMetrics,omitempty"`
	Components            []*Component             `protobuf:"bytes,25,rep,name=components" json:"components,omitempty"`
}

func (x *RawData) Reset() {
	*x = RawData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawData) ProtoMessage() {}

func (x *RawData) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawData.ProtoReflect.Descriptor instead.
func (*RawData) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{0}
}

func (x *RawData) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *RawData) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *RawData) GetServerConfig() *ServerConfig {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

func (x *RawData) GetHeapMemory() *HeapMemory {
	if x != nil {
		return x.HeapMemory
	}
	return nil
}

func (x *RawData) GetGcActivity() *GcActivity {
	if x != nil {
		return x.GcActivity
	}
	return nil
}

func (x *RawData) GetThreadActivity() *ThreadActivity {
	if x != nil {
		return x.ThreadActivity
	}
	return nil
}

func (x *RawData) GetSessionActivity() *SessionActivity {
	if x != nil {
		return x.SessionActivity
	}
	return nil
}

func (x *RawData) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// Deprecated: Do not use.
func (x *RawData) GetSamples() []*MethodCallSamplig {
	if x != nil {
		return x.Samples
	}
	return nil
}

// Deprecated: Do not use.
func (x *RawData) GetMetrics() []*ItemMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *RawData) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *RawData) GetHostkey() int64 {
	if x != nil && x.Hostkey != nil {
		return *x.Hostkey
	}
	return 0
}

func (x *RawData) GetThreadInfos() []*ThreadInfo {
	if x != nil {
		return x.ThreadInfos
	}
	return nil
}

func (x *RawData) GetEndUserTiming() []string {
	if x != nil {
		return x.EndUserTiming
	}
	return nil
}

func (x *RawData) GetMBean() []*MBean {
	if x != nil {
		return x.MBean
	}
	return nil
}

func (x *RawData) GetSegmentDictionary() *Dictionary {
	if x != nil {
		return x.SegmentDictionary
	}
	return nil
}

func (x *RawData) GetQueryDictionary() *Dictionary {
	if x != nil {
		return x.QueryDictionary
	}
	return nil
}

func (x *RawData) GetClassDictionary() *Dictionary {
	if x != nil {
		return x.ClassDictionary
	}
	return nil
}

func (x *RawData) GetMethodDictionary() *Dictionary {
	if x != nil {
		return x.MethodDictionary
	}
	return nil
}

func (x *RawData) GetUserAgent() *Dictionary {
	if x != nil {
		return x.UserAgent
	}
	return nil
}

func (x *RawData) GetMbeanDictionary() *Dictionary {
	if x != nil {
		return x.MbeanDictionary
	}
	return nil
}

func (x *RawData) GetJmsDictionary() *Dictionary {
	if x != nil {
		return x.JmsDictionary
	}
	return nil
}

func (x *RawData) GetTroubleshootingEvents() []*TroubleshootingEvents {
	if x != nil {
		return x.TroubleshootingEvents
	}
	return nil
}

func (x *RawData) GetSystemMetrics() []*SystemMetricSample {
	if x != nil {
		return x.SystemMetrics
	}
	return nil
}

func (x *RawData) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

// SERVER CONFIGURATION
type ServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	OsArch *string `protobuf:"bytes,1,opt,name=osArch" json:"osArch,omitempty"` // use jvmInfo.systemProperties
	// Deprecated: Do not use.
	OsName *string `protobuf:"bytes,2,opt,name=osName" json:"osName,omitempty"` // use jvmInfo.systemProperties
	// Deprecated: Do not use.
	OsVersion           *string `protobuf:"bytes,3,opt,name=osVersion" json:"osVersion,omitempty"` // use jvmInfo.systemProperties
	AvailableProcessors *int32  `protobuf:"varint,4,opt,name=availableProcessors" json:"availableProcessors,omitempty"`
	VmName              *string `protobuf:"bytes,5,opt,name=vmName" json:"vmName,omitempty"`
	// Deprecated: Do not use.
	VmVersion *string `protobuf:"bytes,6,opt,name=vmVersion" json:"vmVersion,omitempty"` // use jvmInfo.systemProperties
	// Deprecated: Do not use.
	VmVendor      *string `protobuf:"bytes,7,opt,name=vmVendor" json:"vmVendor,omitempty"` // use jvmInfo.systemProperties
	StartTime     *int64  `protobuf:"varint,8,opt,name=startTime" json:"startTime,omitempty"`
	BootClassPath *string `protobuf:"bytes,9,opt,name=bootClassPath" json:"bootClassPath,omitempty"`
	// Deprecated: Do not use.
	SystemProperties   *string `protobuf:"bytes,10,opt,name=systemProperties" json:"systemProperties,omitempty"` // use jvmInfo.systemProperties
	ServletContextName *string `protobuf:"bytes,11,opt,name=servletContextName" json:"servletContextName,omitempty"`
	ServerInfo         *string `protobuf:"bytes,12,opt,name=serverInfo" json:"serverInfo,omitempty"`
	CanonicalHostName  *string `protobuf:"bytes,13,opt,name=canonicalHostName" json:"canonicalHostName,omitempty"`
	HostAddress        *string `protobuf:"bytes,14,opt,name=hostAddress" json:"hostAddress,omitempty"`
	// Deprecated: Do not use.
	HostName         *string  `protobuf:"bytes,15,opt,name=hostName" json:"hostName,omitempty"` // use jvmInfo.hostName
	AppName          *string  `protobuf:"bytes,16,opt,name=appName" json:"appName,omitempty"`
	Environment      *string  `protobuf:"bytes,17,opt,name=environment" json:"environment,omitempty"`
	ServerName       *string  `protobuf:"bytes,18,opt,name=serverName" json:"serverName,omitempty"`
	ServerPort       *int32   `protobuf:"varint,19,opt,name=serverPort" json:"serverPort,omitempty"`
	InputArguments   *string  `protobuf:"bytes,20,opt,name=inputArguments" json:"inputArguments,omitempty"`
	DiagnosticConfig *string  `protobuf:"bytes,21,opt,name=diagnosticConfig" json:"diagnosticConfig,omitempty"`
	NudgeVersion     *string  `protobuf:"bytes,22,opt,name=nudgeVersion" json:"nudgeVersion,omitempty"`
	JvmInfo          *JvmInfo `protobuf:"bytes,23,opt,name=jvmInfo" json:"jvmInfo,omitempty"`
}

func (x *ServerConfig) Reset() {
	*x = ServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConfig) ProtoMessage() {}

func (x *ServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConfig.ProtoReflect.Descriptor instead.
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Do not use.
func (x *ServerConfig) GetOsArch() string {
	if x != nil && x.OsArch != nil {
		return *x.OsArch
	}
	return ""
}

// Deprecated: Do not use.
func (x *ServerConfig) GetOsName() string {
	if x != nil && x.OsName != nil {
		return *x.OsName
	}
	return ""
}

// Deprecated: Do not use.
func (x *ServerConfig) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *ServerConfig) GetAvailableProcessors() int32 {
	if x != nil && x.AvailableProcessors != nil {
		return *x.AvailableProcessors
	}
	return 0
}

func (x *ServerConfig) GetVmName() string {
	if x != nil && x.VmName != nil {
		return *x.VmName
	}
	return ""
}

// Deprecated: Do not use.
func (x *ServerConfig) GetVmVersion() string {
	if x != nil && x.VmVersion != nil {
		return *x.VmVersion
	}
	return ""
}

// Deprecated: Do not use.
func (x *ServerConfig) GetVmVendor() string {
	if x != nil && x.VmVendor != nil {
		return *x.VmVendor
	}
	return ""
}

func (x *ServerConfig) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *ServerConfig) GetBootClassPath() string {
	if x != nil && x.BootClassPath != nil {
		return *x.BootClassPath
	}
	return ""
}

// Deprecated: Do not use.
func (x *ServerConfig) GetSystemProperties() string {
	if x != nil && x.SystemProperties != nil {
		return *x.SystemProperties
	}
	return ""
}

func (x *ServerConfig) GetServletContextName() string {
	if x != nil && x.ServletContextName != nil {
		return *x.ServletContextName
	}
	return ""
}

func (x *ServerConfig) GetServerInfo() string {
	if x != nil && x.ServerInfo != nil {
		return *x.ServerInfo
	}
	return ""
}

func (x *ServerConfig) GetCanonicalHostName() string {
	if x != nil && x.CanonicalHostName != nil {
		return *x.CanonicalHostName
	}
	return ""
}

func (x *ServerConfig) GetHostAddress() string {
	if x != nil && x.HostAddress != nil {
		return *x.HostAddress
	}
	return ""
}

// Deprecated: Do not use.
func (x *ServerConfig) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *ServerConfig) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *ServerConfig) GetEnvironment() string {
	if x != nil && x.Environment != nil {
		return *x.Environment
	}
	return ""
}

func (x *ServerConfig) GetServerName() string {
	if x != nil && x.ServerName != nil {
		return *x.ServerName
	}
	return ""
}

func (x *ServerConfig) GetServerPort() int32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *ServerConfig) GetInputArguments() string {
	if x != nil && x.InputArguments != nil {
		return *x.InputArguments
	}
	return ""
}

func (x *ServerConfig) GetDiagnosticConfig() string {
	if x != nil && x.DiagnosticConfig != nil {
		return *x.DiagnosticConfig
	}
	return ""
}

func (x *ServerConfig) GetNudgeVersion() string {
	if x != nil && x.NudgeVersion != nil {
		return *x.NudgeVersion
	}
	return ""
}

func (x *ServerConfig) GetJvmInfo() *JvmInfo {
	if x != nil {
		return x.JvmInfo
	}
	return nil
}

type JvmInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName         *string     `protobuf:"bytes,1,opt,name=hostName" json:"hostName,omitempty"`
	Components       []*KeyValue `protobuf:"bytes,2,rep,name=components" json:"components,omitempty"`
	SystemProperties []*KeyValue `protobuf:"bytes,3,rep,name=systemProperties" json:"systemProperties,omitempty"`
	Qualifier        *string     `protobuf:"bytes,4,opt,name=qualifier" json:"qualifier,omitempty"`
}

func (x *JvmInfo) Reset() {
	*x = JvmInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JvmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JvmInfo) ProtoMessage() {}

func (x *JvmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JvmInfo.ProtoReflect.Descriptor instead.
func (*JvmInfo) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{2}
}

func (x *JvmInfo) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *JvmInfo) GetComponents() []*KeyValue {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *JvmInfo) GetSystemProperties() []*KeyValue {
	if x != nil {
		return x.SystemProperties
	}
	return nil
}

func (x *JvmInfo) GetQualifier() string {
	if x != nil && x.Qualifier != nil {
		return *x.Qualifier
	}
	return ""
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{3}
}

func (x *KeyValue) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// HEAP MEMORY USAGE
type HeapMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance start time
	StartTime *int64 `protobuf:"varint,1,req,name=startTime" json:"startTime,omitempty"`
	// heap memory sampling time
	EndTime *int64 `protobuf:"varint,2,req,name=endTime" json:"endTime,omitempty"`
	// heap memory used
	Used *int64 `protobuf:"varint,3,req,name=used" json:"used,omitempty"`
}

func (x *HeapMemory) Reset() {
	*x = HeapMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapMemory) ProtoMessage() {}

func (x *HeapMemory) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapMemory.ProtoReflect.Descriptor instead.
func (*HeapMemory) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{4}
}

func (x *HeapMemory) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *HeapMemory) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *HeapMemory) GetUsed() int64 {
	if x != nil && x.Used != nil {
		return *x.Used
	}
	return 0
}

// GARBAGE COLLECTOR
type GcActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance start time
	StartTime *int64 `protobuf:"varint,1,req,name=startTime" json:"startTime,omitempty"`
	// cpu sampling time
	EndTime *int64 `protobuf:"varint,2,req,name=endTime" json:"endTime,omitempty"`
	// number of collections
	CollectionCount *int32 `protobuf:"varint,3,req,name=collectionCount" json:"collectionCount,omitempty"`
	// collection elapsed time (cumulated)
	CollectionTime *int64 `protobuf:"varint,4,req,name=collectionTime" json:"collectionTime,omitempty"`
}

func (x *GcActivity) Reset() {
	*x = GcActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcActivity) ProtoMessage() {}

func (x *GcActivity) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcActivity.ProtoReflect.Descriptor instead.
func (*GcActivity) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{5}
}

func (x *GcActivity) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *GcActivity) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *GcActivity) GetCollectionCount() int32 {
	if x != nil && x.CollectionCount != nil {
		return *x.CollectionCount
	}
	return 0
}

func (x *GcActivity) GetCollectionTime() int64 {
	if x != nil && x.CollectionTime != nil {
		return *x.CollectionTime
	}
	return 0
}

// THREADS STATISTICS
type ThreadActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance start time
	StartTime *int64 `protobuf:"varint,1,req,name=startTime" json:"startTime,omitempty"`
	// threads sampling time
	EndTime *int64 `protobuf:"varint,2,req,name=endTime" json:"endTime,omitempty"`
	// number of live threads
	Count *int32 `protobuf:"varint,3,req,name=count" json:"count,omitempty"`
	// number of live daemon threads
	DaemonThreadCount *int32 `protobuf:"varint,4,req,name=daemonThreadCount" json:"daemonThreadCount,omitempty"`
	// number of new threads created since last sampling
	NewThreadCount *int32 `protobuf:"varint,5,req,name=newThreadCount" json:"newThreadCount,omitempty"`
	// cpu time (ThreadMXBean.getThreadCpuTime)
	CpuTime *int64 `protobuf:"varint,6,req,name=cpuTime" json:"cpuTime,omitempty"`
	// user time (ThreadMXBean.getThreadUserTime)
	UserTime *int64 `protobuf:"varint,7,req,name=userTime" json:"userTime,omitempty"`
}

func (x *ThreadActivity) Reset() {
	*x = ThreadActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadActivity) ProtoMessage() {}

func (x *ThreadActivity) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadActivity.ProtoReflect.Descriptor instead.
func (*ThreadActivity) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{6}
}

func (x *ThreadActivity) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *ThreadActivity) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *ThreadActivity) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *ThreadActivity) GetDaemonThreadCount() int32 {
	if x != nil && x.DaemonThreadCount != nil {
		return *x.DaemonThreadCount
	}
	return 0
}

func (x *ThreadActivity) GetNewThreadCount() int32 {
	if x != nil && x.NewThreadCount != nil {
		return *x.NewThreadCount
	}
	return 0
}

func (x *ThreadActivity) GetCpuTime() int64 {
	if x != nil && x.CpuTime != nil {
		return *x.CpuTime
	}
	return 0
}

func (x *ThreadActivity) GetUserTime() int64 {
	if x != nil && x.UserTime != nil {
		return *x.UserTime
	}
	return 0
}

// STACKTRACE
type ThreadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         *string                         `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"` // Identifiant de la transaction
	Url          *string                         `protobuf:"bytes,2,req,name=url" json:"url,omitempty"`
	TimeStamp    *int64                          `protobuf:"varint,3,req,name=timeStamp" json:"timeStamp,omitempty"`
	State        *ThreadInfo_State               `protobuf:"varint,4,req,name=state,enum=ThreadInfo_State" json:"state,omitempty"`
	Frames       []*ThreadInfo_StackTraceElement `protobuf:"bytes,5,rep,name=frames" json:"frames,omitempty"`
	BlockedCount *int64                          `protobuf:"varint,6,opt,name=blockedCount" json:"blockedCount,omitempty"`
	BlockedTime  *int64                          `protobuf:"varint,7,opt,name=blockedTime,def=-1" json:"blockedTime,omitempty"`
	WaitedCount  *int64                          `protobuf:"varint,8,opt,name=waitedCount" json:"waitedCount,omitempty"`
	WaitedTime   *int64                          `protobuf:"varint,9,opt,name=waitedTime,def=-1" json:"waitedTime,omitempty"`
}

// Default values for ThreadInfo fields.
const (
	Default_ThreadInfo_BlockedTime = int64(-1)
	Default_ThreadInfo_WaitedTime  = int64(-1)
)

func (x *ThreadInfo) Reset() {
	*x = ThreadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadInfo) ProtoMessage() {}

func (x *ThreadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadInfo.ProtoReflect.Descriptor instead.
func (*ThreadInfo) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{7}
}

func (x *ThreadInfo) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *ThreadInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *ThreadInfo) GetTimeStamp() int64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *ThreadInfo) GetState() ThreadInfo_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ThreadInfo_NEW
}

func (x *ThreadInfo) GetFrames() []*ThreadInfo_StackTraceElement {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *ThreadInfo) GetBlockedCount() int64 {
	if x != nil && x.BlockedCount != nil {
		return *x.BlockedCount
	}
	return 0
}

func (x *ThreadInfo) GetBlockedTime() int64 {
	if x != nil && x.BlockedTime != nil {
		return *x.BlockedTime
	}
	return Default_ThreadInfo_BlockedTime
}

func (x *ThreadInfo) GetWaitedCount() int64 {
	if x != nil && x.WaitedCount != nil {
		return *x.WaitedCount
	}
	return 0
}

func (x *ThreadInfo) GetWaitedTime() int64 {
	if x != nil && x.WaitedTime != nil {
		return *x.WaitedTime
	}
	return Default_ThreadInfo_WaitedTime
}

type ThreadInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threads []*ThreadInfo `protobuf:"bytes,1,rep,name=threads" json:"threads,omitempty"`
}

func (x *ThreadInfoList) Reset() {
	*x = ThreadInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadInfoList) ProtoMessage() {}

func (x *ThreadInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadInfoList.ProtoReflect.Descriptor instead.
func (*ThreadInfoList) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{8}
}

func (x *ThreadInfoList) GetThreads() []*ThreadInfo {
	if x != nil {
		return x.Threads
	}
	return nil
}

type CallTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootNode *CallTreeNode `protobuf:"bytes,1,opt,name=rootNode" json:"rootNode,omitempty"`
}

func (x *CallTree) Reset() {
	*x = CallTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallTree) ProtoMessage() {}

func (x *CallTree) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallTree.ProtoReflect.Descriptor instead.
func (*CallTree) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{9}
}

func (x *CallTree) GetRootNode() *CallTreeNode {
	if x != nil {
		return x.RootNode
	}
	return nil
}

type CallTreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string         `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Time   *int64          `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	Childs []*CallTreeNode `protobuf:"bytes,3,rep,name=childs" json:"childs,omitempty"`
}

func (x *CallTreeNode) Reset() {
	*x = CallTreeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallTreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallTreeNode) ProtoMessage() {}

func (x *CallTreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallTreeNode.ProtoReflect.Descriptor instead.
func (*CallTreeNode) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{10}
}

func (x *CallTreeNode) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CallTreeNode) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CallTreeNode) GetChilds() []*CallTreeNode {
	if x != nil {
		return x.Childs
	}
	return nil
}

// SESSION USAGE
type SessionActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime       *int64 `protobuf:"varint,1,req,name=startTime" json:"startTime,omitempty"`
	EndTime         *int64 `protobuf:"varint,2,opt,name=endTime" json:"endTime,omitempty"`
	Count           *int32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	NewSessionCount *int32 `protobuf:"varint,4,opt,name=newSessionCount" json:"newSessionCount,omitempty"`
}

func (x *SessionActivity) Reset() {
	*x = SessionActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionActivity) ProtoMessage() {}

func (x *SessionActivity) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionActivity.ProtoReflect.Descriptor instead.
func (*SessionActivity) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{11}
}

func (x *SessionActivity) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *SessionActivity) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *SessionActivity) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *SessionActivity) GetNewSessionCount() int32 {
	if x != nil && x.NewSessionCount != nil {
		return *x.NewSessionCount
	}
	return 0
}

// TRANSACTION
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// use 'code' instead.
	// l'URL pour une requête HTTP, le nom de la methode principale pour un batch
	//
	// Deprecated: Do not use.
	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// Deprecated: Do not use.
	Id        *int64  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"` // obsolete
	SessionId *string `protobuf:"bytes,3,opt,name=sessionId" json:"sessionId,omitempty"`
	// Deprecated: Do not use.
	Seg1Id *string `protobuf:"bytes,4,opt,name=seg1Id" json:"seg1Id,omitempty"` // obsolete
	// Deprecated: Do not use.
	Seg2Id *string `protobuf:"bytes,5,opt,name=seg2Id" json:"seg2Id,omitempty"` // obsolete
	// Deprecated: Do not use.
	Seg3Id    *string `protobuf:"bytes,6,opt,name=seg3Id" json:"seg3Id,omitempty"`        // obsolete
	StartTime *int64  `protobuf:"varint,7,opt,name=startTime" json:"startTime,omitempty"` // timestamp EPOCH de debut en ms
	EndTime   *int64  `protobuf:"varint,8,opt,name=endTime" json:"endTime,omitempty"`     // timestamp EPOCH de fin en ms
	// Parametres de la requete HTTP ou du BATCH
	Params []*Param            `protobuf:"bytes,9,rep,name=params" json:"params,omitempty"`
	Status *Transaction_Status `protobuf:"varint,10,opt,name=status,enum=Transaction_Status,def=0" json:"status,omitempty"`
	Errors []*Error            `protobuf:"bytes,11,rep,name=errors" json:"errors,omitempty"`
	// Champs suivants : statistiques sur l'activite generee par la transaction sur la(les) base(s) de donnees
	//
	// Deprecated: Do not use.
	DbCnxCount *int32 `protobuf:"varint,12,opt,name=dbCnxCount,def=0" json:"dbCnxCount,omitempty"`
	// Deprecated: Do not use.
	DbCnxAvg *int64 `protobuf:"varint,13,opt,name=dbCnxAvg,def=0" json:"dbCnxAvg,omitempty"`
	// Deprecated: Do not use.
	DbCnxMin *int64 `protobuf:"varint,14,opt,name=dbCnxMin,def=0" json:"dbCnxMin,omitempty"`
	// Deprecated: Do not use.
	DbCnxMax *int64 `protobuf:"varint,15,opt,name=dbCnxMax,def=0" json:"dbCnxMax,omitempty"`
	// Deprecated: Do not use.
	DbQueryCount *int32 `protobuf:"varint,16,opt,name=dbQueryCount,def=0" json:"dbQueryCount,omitempty"`
	// Deprecated: Do not use.
	DbQueryAvg *int64 `protobuf:"varint,17,opt,name=dbQueryAvg,def=0" json:"dbQueryAvg,omitempty"`
	// Deprecated: Do not use.
	DbQueryMin *int64 `protobuf:"varint,18,opt,name=dbQueryMin,def=0" json:"dbQueryMin,omitempty"`
	// Deprecated: Do not use.
	DbQueryMax *int64 `protobuf:"varint,19,opt,name=dbQueryMax,def=0" json:"dbQueryMax,omitempty"`
	// Deprecated: Do not use.
	DbFetchCount *int32 `protobuf:"varint,20,opt,name=dbFetchCount,def=0" json:"dbFetchCount,omitempty"`
	// Deprecated: Do not use.
	SqlRequests []*SqlRequest `protobuf:"bytes,21,rep,name=sqlRequests" json:"sqlRequests,omitempty"`
	// Deprecated: Do not use.
	DbCommitCount *int32 `protobuf:"varint,22,opt,name=dbCommitCount,def=0" json:"dbCommitCount,omitempty"`
	// Deprecated: Do not use.
	DbCommitAvg *int64 `protobuf:"varint,23,opt,name=dbCommitAvg,def=0" json:"dbCommitAvg,omitempty"`
	// Deprecated: Do not use.
	DbCommitMin *int64 `protobuf:"varint,24,opt,name=dbCommitMin,def=0" json:"dbCommitMin,omitempty"`
	// Deprecated: Do not use.
	DbCommitMax *int64 `protobuf:"varint,25,opt,name=dbCommitMax,def=0" json:"dbCommitMax,omitempty"`
	// Deprecated: Do not use.
	DbRollbackCount *int32 `protobuf:"varint,26,opt,name=dbRollbackCount,def=0" json:"dbRollbackCount,omitempty"`
	// Deprecated: Do not use.
	DbRollbackAvg *int64 `protobuf:"varint,27,opt,name=dbRollbackAvg,def=0" json:"dbRollbackAvg,omitempty"`
	// Deprecated: Do not use.
	DbRollbackMin *int64 `protobuf:"varint,28,opt,name=dbRollbackMin,def=0" json:"dbRollbackMin,omitempty"`
	// Deprecated: Do not use.
	DbRollbackMax *int64 `protobuf:"varint,29,opt,name=dbRollbackMax,def=0" json:"dbRollbackMax,omitempty"`
	// Deprecated: Do not use.
	Type *Transaction_Type `protobuf:"varint,30,opt,name=type,enum=Transaction_Type,def=0" json:"type,omitempty"`
	// Deprecated: Do not use.
	FromServerUrl *string `protobuf:"bytes,31,opt,name=fromServerUrl" json:"fromServerUrl,omitempty"`
	// Deprecated: Do not use.
	FromServerId *string `protobuf:"bytes,32,opt,name=fromServerId" json:"fromServerId,omitempty"`
	// Deprecated: Do not use.
	FromTransactionUrl *string `protobuf:"bytes,33,opt,name=fromTransactionUrl" json:"fromTransactionUrl,omitempty"`
	// Deprecated: Do not use.
	FromTransactionId *int64 `protobuf:"varint,34,opt,name=fromTransactionId" json:"fromTransactionId,omitempty"` // l'Id associée à l'URL
	// X-JVM purpose.
	// Must match Rawdata.serverId of upstream probe
	UpstreamAgentId *string `protobuf:"bytes,35,opt,name=upstreamAgentId" json:"upstreamAgentId,omitempty"`
	// Must match Transaction.uuid of upstream Transaction
	UpstreamTxId *string `protobuf:"bytes,36,opt,name=upstreamTxId" json:"upstreamTxId,omitempty"`
	// Must match an id of LayerDetail.correlationIds of upstream Transaction
	UpstreamCorrelationId *uint32 `protobuf:"varint,37,opt,name=upstreamCorrelationId" json:"upstreamCorrelationId,omitempty"`
	// transaction type
	TxType *string `protobuf:"bytes,40,opt,name=txType" json:"txType,omitempty"`
	// code (default tx name) + extended codes (for protocol-spectific values)
	Code          *string     `protobuf:"bytes,41,opt,name=code" json:"code,omitempty"`
	ExtendedCodes []*KeyValue `protobuf:"bytes,42,rep,name=extendedCodes" json:"extendedCodes,omitempty"`
	// Champ libre pour passer des informations complémentaires
	Metrics []*Metric `protobuf:"bytes,50,rep,name=metrics" json:"metrics,omitempty"`
	// Deprecated: Do not use.
	DbFetchAvg *int64 `protobuf:"varint,60,opt,name=dbFetchAvg,def=0" json:"dbFetchAvg,omitempty"`
	// Deprecated: Do not use.
	DbFetchMin *int64 `protobuf:"varint,61,opt,name=dbFetchMin,def=0" json:"dbFetchMin,omitempty"`
	// Deprecated: Do not use.
	DbFetchMax *int64 `protobuf:"varint,62,opt,name=dbFetchMax,def=0" json:"dbFetchMax,omitempty"`
	// Impact de la sonde
	CpuOverhead    *int64 `protobuf:"varint,70,opt,name=cpuOverhead" json:"cpuOverhead,omitempty"`
	MemoryOverhead *int64 `protobuf:"varint,71,opt,name=memoryOverhead" json:"memoryOverhead,omitempty"`
	// la liste headers ne contient que des headers de la réponse.
	// TODO : utiliser Transaction.extendedCodes + système de filtrage similaire aux headers de requête ?
	Headers  []*Param `protobuf:"bytes,80,rep,name=headers" json:"headers,omitempty"`
	Protocol *string  `protobuf:"bytes,81,opt,name=protocol" json:"protocol,omitempty"`
	Uuid     *string  `protobuf:"bytes,82,opt,name=uuid" json:"uuid,omitempty"`
	// TODO utiliser Transaction.extendedCodes ?
	UserAgent      *string `protobuf:"bytes,83,opt,name=userAgent" json:"userAgent,omitempty"`
	UserIp         *string `protobuf:"bytes,84,opt,name=userIp" json:"userIp,omitempty"`
	RespStatusCode *int32  `protobuf:"varint,85,opt,name=respStatusCode" json:"respStatusCode,omitempty"`
	// deprecated: ce champ peut être alimenté dans l'objet headers (id 80)
	//
	// Deprecated: Do not use.
	RespContentType *string `protobuf:"bytes,86,opt,name=respContentType" json:"respContentType,omitempty"`
	MethodName      *string `protobuf:"bytes,87,opt,name=methodName" json:"methodName,omitempty"`
	// use Transaction.extendedCodes key/value instead
	//
	// Deprecated: Do not use.
	ReqMethod   *Transaction_ReqMethod `protobuf:"varint,88,opt,name=reqMethod,enum=Transaction_ReqMethod" json:"reqMethod,omitempty"` // obsolete : does not allow webdav methods
	UrlID       *int32                 `protobuf:"varint,89,opt,name=urlID" json:"urlID,omitempty"`
	UseragentID *int32                 `protobuf:"varint,90,opt,name=useragentID" json:"useragentID,omitempty"`
	// Statistiques sur l'activité générée par la transaction sur le(s) webservice(s)
	//
	// Deprecated: Do not use.
	WsCount *int32 `protobuf:"varint,91,opt,name=wsCount,def=0" json:"wsCount,omitempty"`
	// Deprecated: Do not use.
	WsAvg *int64 `protobuf:"varint,92,opt,name=wsAvg,def=0" json:"wsAvg,omitempty"`
	// Deprecated: Do not use.
	WsMin *int64 `protobuf:"varint,93,opt,name=wsMin,def=0" json:"wsMin,omitempty"`
	// Deprecated: Do not use.
	WsMax *int64 `protobuf:"varint,94,opt,name=wsMax,def=0" json:"wsMax,omitempty"`
	// Deprecated: Do not use.
	WsRequests []*WSRequest `protobuf:"bytes,95,rep,name=wsRequests" json:"wsRequests,omitempty"`
	// JMS
	//
	// Deprecated: Do not use.
	ConsumedJMS []*JMSMessage `protobuf:"bytes,96,rep,name=consumedJMS" json:"consumedJMS,omitempty"`
	// Deprecated: Do not use.
	ProducedJMS []*JMSMessage `protobuf:"bytes,97,rep,name=producedJMS" json:"producedJMS,omitempty"`
	// Statistiques sur l'activité générée par les messages JMS”
	//
	// Deprecated: Do not use.
	ConsJMSCount *int32 `protobuf:"varint,98,opt,name=consJMSCount,def=0" json:"consJMSCount,omitempty"`
	// Deprecated: Do not use.
	ConsJMSAvg *int64 `protobuf:"varint,99,opt,name=consJMSAvg,def=0" json:"consJMSAvg,omitempty"`
	// Deprecated: Do not use.
	ConsJMSMin *int64 `protobuf:"varint,100,opt,name=consJMSMin,def=0" json:"consJMSMin,omitempty"`
	// Deprecated: Do not use.
	ConsJMSMax *int64 `protobuf:"varint,101,opt,name=consJMSMax,def=0" json:"consJMSMax,omitempty"`
	// Deprecated: Do not use.
	ProdJMSCount *int32 `protobuf:"varint,102,opt,name=prodJMSCount,def=0" json:"prodJMSCount,omitempty"`
	// Deprecated: Do not use.
	ProdJMSAvg *int64 `protobuf:"varint,103,opt,name=prodJMSAvg,def=0" json:"prodJMSAvg,omitempty"`
	// Deprecated: Do not use.
	ProdJMSMin *int64 `protobuf:"varint,104,opt,name=prodJMSMin,def=0" json:"prodJMSMin,omitempty"`
	// Deprecated: Do not use.
	ProdJMSMax *int64 `protobuf:"varint,105,opt,name=prodJMSMax,def=0" json:"prodJMSMax,omitempty"`
	// Deprecated: Do not use.
	DbQueryTotal  *int64                 `protobuf:"varint,106,opt,name=dbQueryTotal,def=0" json:"dbQueryTotal,omitempty"`
	NumericValues []*CustomNumericValue  `protobuf:"bytes,107,rep,name=numericValues" json:"numericValues,omitempty"`
	SegmentValues []*CustomSegmentValues `protobuf:"bytes,108,rep,name=segmentValues" json:"segmentValues,omitempty"`
	// generic layers.
	// in the future ws, jms and cache calls could become generic layers
	Layers []*Layer `protobuf:"bytes,109,rep,name=layers" json:"layers,omitempty"`
	// specify the type of transaction,
	// could be http, rmi, jms ...
	// can contains several values for multiple layers like "ejb" over "rmi" ou "rpc/gwt" over "http".
	// the first element in the list is the first met by the application.
	// for example, if there is ejb over rmi, inputLayers = {"rmi","ejb"}.
	// TODO : duplication avec txType et pertinence >1 valeur ?
	Types    []string  `protobuf:"bytes,110,rep,name=types" json:"types,omitempty"`
	CallTree *CallTree `protobuf:"bytes,111,opt,name=callTree" json:"callTree,omitempty"`
	// Valeurs des paramètres de headers http.
	// TODO : à déprécier et utiliser Transaction.extendedCodes
	ReqHeaders []*Param `protobuf:"bytes,112,rep,name=reqHeaders" json:"reqHeaders,omitempty"`
}

// Default values for Transaction fields.
const (
	Default_Transaction_Status          = Transaction_OK
	Default_Transaction_DbCnxCount      = int32(0)
	Default_Transaction_DbCnxAvg        = int64(0)
	Default_Transaction_DbCnxMin        = int64(0)
	Default_Transaction_DbCnxMax        = int64(0)
	Default_Transaction_DbQueryCount    = int32(0)
	Default_Transaction_DbQueryAvg      = int64(0)
	Default_Transaction_DbQueryMin      = int64(0)
	Default_Transaction_DbQueryMax      = int64(0)
	Default_Transaction_DbFetchCount    = int32(0)
	Default_Transaction_DbCommitCount   = int32(0)
	Default_Transaction_DbCommitAvg     = int64(0)
	Default_Transaction_DbCommitMin     = int64(0)
	Default_Transaction_DbCommitMax     = int64(0)
	Default_Transaction_DbRollbackCount = int32(0)
	Default_Transaction_DbRollbackAvg   = int64(0)
	Default_Transaction_DbRollbackMin   = int64(0)
	Default_Transaction_DbRollbackMax   = int64(0)
	Default_Transaction_Type            = Transaction_TRANSACTION
	Default_Transaction_DbFetchAvg      = int64(0)
	Default_Transaction_DbFetchMin      = int64(0)
	Default_Transaction_DbFetchMax      = int64(0)
	Default_Transaction_WsCount         = int32(0)
	Default_Transaction_WsAvg           = int64(0)
	Default_Transaction_WsMin           = int64(0)
	Default_Transaction_WsMax           = int64(0)
	Default_Transaction_ConsJMSCount    = int32(0)
	Default_Transaction_ConsJMSAvg      = int64(0)
	Default_Transaction_ConsJMSMin      = int64(0)
	Default_Transaction_ConsJMSMax      = int64(0)
	Default_Transaction_ProdJMSCount    = int32(0)
	Default_Transaction_ProdJMSAvg      = int64(0)
	Default_Transaction_ProdJMSMin      = int64(0)
	Default_Transaction_ProdJMSMax      = int64(0)
	Default_Transaction_DbQueryTotal    = int64(0)
)

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{12}
}

// Deprecated: Do not use.
func (x *Transaction) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

// Deprecated: Do not use.
func (x *Transaction) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Transaction) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

// Deprecated: Do not use.
func (x *Transaction) GetSeg1Id() string {
	if x != nil && x.Seg1Id != nil {
		return *x.Seg1Id
	}
	return ""
}

// Deprecated: Do not use.
func (x *Transaction) GetSeg2Id() string {
	if x != nil && x.Seg2Id != nil {
		return *x.Seg2Id
	}
	return ""
}

// Deprecated: Do not use.
func (x *Transaction) GetSeg3Id() string {
	if x != nil && x.Seg3Id != nil {
		return *x.Seg3Id
	}
	return ""
}

func (x *Transaction) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *Transaction) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *Transaction) GetParams() []*Param {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Transaction) GetStatus() Transaction_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_Transaction_Status
}

func (x *Transaction) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Deprecated: Do not use.
func (x *Transaction) GetDbCnxCount() int32 {
	if x != nil && x.DbCnxCount != nil {
		return *x.DbCnxCount
	}
	return Default_Transaction_DbCnxCount
}

// Deprecated: Do not use.
func (x *Transaction) GetDbCnxAvg() int64 {
	if x != nil && x.DbCnxAvg != nil {
		return *x.DbCnxAvg
	}
	return Default_Transaction_DbCnxAvg
}

// Deprecated: Do not use.
func (x *Transaction) GetDbCnxMin() int64 {
	if x != nil && x.DbCnxMin != nil {
		return *x.DbCnxMin
	}
	return Default_Transaction_DbCnxMin
}

// Deprecated: Do not use.
func (x *Transaction) GetDbCnxMax() int64 {
	if x != nil && x.DbCnxMax != nil {
		return *x.DbCnxMax
	}
	return Default_Transaction_DbCnxMax
}

// Deprecated: Do not use.
func (x *Transaction) GetDbQueryCount() int32 {
	if x != nil && x.DbQueryCount != nil {
		return *x.DbQueryCount
	}
	return Default_Transaction_DbQueryCount
}

// Deprecated: Do not use.
func (x *Transaction) GetDbQueryAvg() int64 {
	if x != nil && x.DbQueryAvg != nil {
		return *x.DbQueryAvg
	}
	return Default_Transaction_DbQueryAvg
}

// Deprecated: Do not use.
func (x *Transaction) GetDbQueryMin() int64 {
	if x != nil && x.DbQueryMin != nil {
		return *x.DbQueryMin
	}
	return Default_Transaction_DbQueryMin
}

// Deprecated: Do not use.
func (x *Transaction) GetDbQueryMax() int64 {
	if x != nil && x.DbQueryMax != nil {
		return *x.DbQueryMax
	}
	return Default_Transaction_DbQueryMax
}

// Deprecated: Do not use.
func (x *Transaction) GetDbFetchCount() int32 {
	if x != nil && x.DbFetchCount != nil {
		return *x.DbFetchCount
	}
	return Default_Transaction_DbFetchCount
}

// Deprecated: Do not use.
func (x *Transaction) GetSqlRequests() []*SqlRequest {
	if x != nil {
		return x.SqlRequests
	}
	return nil
}

// Deprecated: Do not use.
func (x *Transaction) GetDbCommitCount() int32 {
	if x != nil && x.DbCommitCount != nil {
		return *x.DbCommitCount
	}
	return Default_Transaction_DbCommitCount
}

// Deprecated: Do not use.
func (x *Transaction) GetDbCommitAvg() int64 {
	if x != nil && x.DbCommitAvg != nil {
		return *x.DbCommitAvg
	}
	return Default_Transaction_DbCommitAvg
}

// Deprecated: Do not use.
func (x *Transaction) GetDbCommitMin() int64 {
	if x != nil && x.DbCommitMin != nil {
		return *x.DbCommitMin
	}
	return Default_Transaction_DbCommitMin
}

// Deprecated: Do not use.
func (x *Transaction) GetDbCommitMax() int64 {
	if x != nil && x.DbCommitMax != nil {
		return *x.DbCommitMax
	}
	return Default_Transaction_DbCommitMax
}

// Deprecated: Do not use.
func (x *Transaction) GetDbRollbackCount() int32 {
	if x != nil && x.DbRollbackCount != nil {
		return *x.DbRollbackCount
	}
	return Default_Transaction_DbRollbackCount
}

// Deprecated: Do not use.
func (x *Transaction) GetDbRollbackAvg() int64 {
	if x != nil && x.DbRollbackAvg != nil {
		return *x.DbRollbackAvg
	}
	return Default_Transaction_DbRollbackAvg
}

// Deprecated: Do not use.
func (x *Transaction) GetDbRollbackMin() int64 {
	if x != nil && x.DbRollbackMin != nil {
		return *x.DbRollbackMin
	}
	return Default_Transaction_DbRollbackMin
}

// Deprecated: Do not use.
func (x *Transaction) GetDbRollbackMax() int64 {
	if x != nil && x.DbRollbackMax != nil {
		return *x.DbRollbackMax
	}
	return Default_Transaction_DbRollbackMax
}

// Deprecated: Do not use.
func (x *Transaction) GetType() Transaction_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_Transaction_Type
}

// Deprecated: Do not use.
func (x *Transaction) GetFromServerUrl() string {
	if x != nil && x.FromServerUrl != nil {
		return *x.FromServerUrl
	}
	return ""
}

// Deprecated: Do not use.
func (x *Transaction) GetFromServerId() string {
	if x != nil && x.FromServerId != nil {
		return *x.FromServerId
	}
	return ""
}

// Deprecated: Do not use.
func (x *Transaction) GetFromTransactionUrl() string {
	if x != nil && x.FromTransactionUrl != nil {
		return *x.FromTransactionUrl
	}
	return ""
}

// Deprecated: Do not use.
func (x *Transaction) GetFromTransactionId() int64 {
	if x != nil && x.FromTransactionId != nil {
		return *x.FromTransactionId
	}
	return 0
}

func (x *Transaction) GetUpstreamAgentId() string {
	if x != nil && x.UpstreamAgentId != nil {
		return *x.UpstreamAgentId
	}
	return ""
}

func (x *Transaction) GetUpstreamTxId() string {
	if x != nil && x.UpstreamTxId != nil {
		return *x.UpstreamTxId
	}
	return ""
}

func (x *Transaction) GetUpstreamCorrelationId() uint32 {
	if x != nil && x.UpstreamCorrelationId != nil {
		return *x.UpstreamCorrelationId
	}
	return 0
}

func (x *Transaction) GetTxType() string {
	if x != nil && x.TxType != nil {
		return *x.TxType
	}
	return ""
}

func (x *Transaction) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Transaction) GetExtendedCodes() []*KeyValue {
	if x != nil {
		return x.ExtendedCodes
	}
	return nil
}

func (x *Transaction) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Deprecated: Do not use.
func (x *Transaction) GetDbFetchAvg() int64 {
	if x != nil && x.DbFetchAvg != nil {
		return *x.DbFetchAvg
	}
	return Default_Transaction_DbFetchAvg
}

// Deprecated: Do not use.
func (x *Transaction) GetDbFetchMin() int64 {
	if x != nil && x.DbFetchMin != nil {
		return *x.DbFetchMin
	}
	return Default_Transaction_DbFetchMin
}

// Deprecated: Do not use.
func (x *Transaction) GetDbFetchMax() int64 {
	if x != nil && x.DbFetchMax != nil {
		return *x.DbFetchMax
	}
	return Default_Transaction_DbFetchMax
}

func (x *Transaction) GetCpuOverhead() int64 {
	if x != nil && x.CpuOverhead != nil {
		return *x.CpuOverhead
	}
	return 0
}

func (x *Transaction) GetMemoryOverhead() int64 {
	if x != nil && x.MemoryOverhead != nil {
		return *x.MemoryOverhead
	}
	return 0
}

func (x *Transaction) GetHeaders() []*Param {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Transaction) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *Transaction) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *Transaction) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *Transaction) GetUserIp() string {
	if x != nil && x.UserIp != nil {
		return *x.UserIp
	}
	return ""
}

func (x *Transaction) GetRespStatusCode() int32 {
	if x != nil && x.RespStatusCode != nil {
		return *x.RespStatusCode
	}
	return 0
}

// Deprecated: Do not use.
func (x *Transaction) GetRespContentType() string {
	if x != nil && x.RespContentType != nil {
		return *x.RespContentType
	}
	return ""
}

func (x *Transaction) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

// Deprecated: Do not use.
func (x *Transaction) GetReqMethod() Transaction_ReqMethod {
	if x != nil && x.ReqMethod != nil {
		return *x.ReqMethod
	}
	return Transaction_CONNECT
}

func (x *Transaction) GetUrlID() int32 {
	if x != nil && x.UrlID != nil {
		return *x.UrlID
	}
	return 0
}

func (x *Transaction) GetUseragentID() int32 {
	if x != nil && x.UseragentID != nil {
		return *x.UseragentID
	}
	return 0
}

// Deprecated: Do not use.
func (x *Transaction) GetWsCount() int32 {
	if x != nil && x.WsCount != nil {
		return *x.WsCount
	}
	return Default_Transaction_WsCount
}

// Deprecated: Do not use.
func (x *Transaction) GetWsAvg() int64 {
	if x != nil && x.WsAvg != nil {
		return *x.WsAvg
	}
	return Default_Transaction_WsAvg
}

// Deprecated: Do not use.
func (x *Transaction) GetWsMin() int64 {
	if x != nil && x.WsMin != nil {
		return *x.WsMin
	}
	return Default_Transaction_WsMin
}

// Deprecated: Do not use.
func (x *Transaction) GetWsMax() int64 {
	if x != nil && x.WsMax != nil {
		return *x.WsMax
	}
	return Default_Transaction_WsMax
}

// Deprecated: Do not use.
func (x *Transaction) GetWsRequests() []*WSRequest {
	if x != nil {
		return x.WsRequests
	}
	return nil
}

// Deprecated: Do not use.
func (x *Transaction) GetConsumedJMS() []*JMSMessage {
	if x != nil {
		return x.ConsumedJMS
	}
	return nil
}

// Deprecated: Do not use.
func (x *Transaction) GetProducedJMS() []*JMSMessage {
	if x != nil {
		return x.ProducedJMS
	}
	return nil
}

// Deprecated: Do not use.
func (x *Transaction) GetConsJMSCount() int32 {
	if x != nil && x.ConsJMSCount != nil {
		return *x.ConsJMSCount
	}
	return Default_Transaction_ConsJMSCount
}

// Deprecated: Do not use.
func (x *Transaction) GetConsJMSAvg() int64 {
	if x != nil && x.ConsJMSAvg != nil {
		return *x.ConsJMSAvg
	}
	return Default_Transaction_ConsJMSAvg
}

// Deprecated: Do not use.
func (x *Transaction) GetConsJMSMin() int64 {
	if x != nil && x.ConsJMSMin != nil {
		return *x.ConsJMSMin
	}
	return Default_Transaction_ConsJMSMin
}

// Deprecated: Do not use.
func (x *Transaction) GetConsJMSMax() int64 {
	if x != nil && x.ConsJMSMax != nil {
		return *x.ConsJMSMax
	}
	return Default_Transaction_ConsJMSMax
}

// Deprecated: Do not use.
func (x *Transaction) GetProdJMSCount() int32 {
	if x != nil && x.ProdJMSCount != nil {
		return *x.ProdJMSCount
	}
	return Default_Transaction_ProdJMSCount
}

// Deprecated: Do not use.
func (x *Transaction) GetProdJMSAvg() int64 {
	if x != nil && x.ProdJMSAvg != nil {
		return *x.ProdJMSAvg
	}
	return Default_Transaction_ProdJMSAvg
}

// Deprecated: Do not use.
func (x *Transaction) GetProdJMSMin() int64 {
	if x != nil && x.ProdJMSMin != nil {
		return *x.ProdJMSMin
	}
	return Default_Transaction_ProdJMSMin
}

// Deprecated: Do not use.
func (x *Transaction) GetProdJMSMax() int64 {
	if x != nil && x.ProdJMSMax != nil {
		return *x.ProdJMSMax
	}
	return Default_Transaction_ProdJMSMax
}

// Deprecated: Do not use.
func (x *Transaction) GetDbQueryTotal() int64 {
	if x != nil && x.DbQueryTotal != nil {
		return *x.DbQueryTotal
	}
	return Default_Transaction_DbQueryTotal
}

func (x *Transaction) GetNumericValues() []*CustomNumericValue {
	if x != nil {
		return x.NumericValues
	}
	return nil
}

func (x *Transaction) GetSegmentValues() []*CustomSegmentValues {
	if x != nil {
		return x.SegmentValues
	}
	return nil
}

func (x *Transaction) GetLayers() []*Layer {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *Transaction) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Transaction) GetCallTree() *CallTree {
	if x != nil {
		return x.CallTree
	}
	return nil
}

func (x *Transaction) GetReqHeaders() []*Param {
	if x != nil {
		return x.ReqHeaders
	}
	return nil
}

// for generic layers purpose
type Layer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// layer name such as: Model,View,Controler
	// or interactions with external tools: ldap, lucene, elasticsearch, github ...
	LayerName *string `protobuf:"bytes,1,opt,name=layerName" json:"layerName,omitempty"`
	// global number of calls to the layer
	Count *int64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	// global number of errors
	Errors *int64 `protobuf:"varint,3,opt,name=errors" json:"errors,omitempty"`
	// global time spent inside the layer
	Time *int64 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	Max  *int64 `protobuf:"varint,5,opt,name=max" json:"max,omitempty"`
	Min  *int64 `protobuf:"varint,6,opt,name=min" json:"min,omitempty"`
	// layer calls details
	Calls []*LayerDetail `protobuf:"bytes,7,rep,name=calls" json:"calls,omitempty"`
}

func (x *Layer) Reset() {
	*x = Layer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer) ProtoMessage() {}

func (x *Layer) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer.ProtoReflect.Descriptor instead.
func (*Layer) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{13}
}

func (x *Layer) GetLayerName() string {
	if x != nil && x.LayerName != nil {
		return *x.LayerName
	}
	return ""
}

func (x *Layer) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *Layer) GetErrors() int64 {
	if x != nil && x.Errors != nil {
		return *x.Errors
	}
	return 0
}

func (x *Layer) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *Layer) GetMax() int64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *Layer) GetMin() int64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *Layer) GetCalls() []*LayerDetail {
	if x != nil {
		return x.Calls
	}
	return nil
}

// for generic layers purpose.
// one layer detail for several calls to the same "code"
type LayerDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// agregated timestamp (timestamp floored to minute)
	Timestamp *int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// call code
	Code *string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	// number of calls to the same code
	Count *int64 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	// number of errors
	Errors *int64 `protobuf:"varint,4,opt,name=errors" json:"errors,omitempty"`
	// global time spent for this code
	Time *int64 `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	Max  *int64 `protobuf:"varint,6,opt,name=max" json:"max,omitempty"`
	Min  *int64 `protobuf:"varint,7,opt,name=min" json:"min,omitempty"`
	// list of all measures
	Values []int64 `protobuf:"varint,8,rep,name=values" json:"values,omitempty"`
	// used as a key-value storage, thus you should use 'extCodes' instead.
	// should have been defined as 'key-value'
	//
	// Deprecated: Do not use.
	ExtendedCodes []string    `protobuf:"bytes,9,rep,name=extendedCodes" json:"extendedCodes,omitempty"`
	ExtCodes      []*KeyValue `protobuf:"bytes,10,rep,name=extCodes" json:"extCodes,omitempty"`
	// detail id to correlate between this layer detail and downstream transactions.
	// values must be unique for a given transaction
	CorrelationIds []uint32 `protobuf:"varint,11,rep,name=correlationIds" json:"correlationIds,omitempty"`
}

func (x *LayerDetail) Reset() {
	*x = LayerDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerDetail) ProtoMessage() {}

func (x *LayerDetail) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerDetail.ProtoReflect.Descriptor instead.
func (*LayerDetail) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{14}
}

func (x *LayerDetail) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *LayerDetail) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *LayerDetail) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *LayerDetail) GetErrors() int64 {
	if x != nil && x.Errors != nil {
		return *x.Errors
	}
	return 0
}

func (x *LayerDetail) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *LayerDetail) GetMax() int64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *LayerDetail) GetMin() int64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *LayerDetail) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Deprecated: Do not use.
func (x *LayerDetail) GetExtendedCodes() []string {
	if x != nil {
		return x.ExtendedCodes
	}
	return nil
}

func (x *LayerDetail) GetExtCodes() []*KeyValue {
	if x != nil {
		return x.ExtCodes
	}
	return nil
}

func (x *LayerDetail) GetCorrelationIds() []uint32 {
	if x != nil {
		return x.CorrelationIds
	}
	return nil
}

type CustomNumericValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (x *CustomNumericValue) Reset() {
	*x = CustomNumericValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomNumericValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomNumericValue) ProtoMessage() {}

func (x *CustomNumericValue) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomNumericValue.ProtoReflect.Descriptor instead.
func (*CustomNumericValue) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{15}
}

func (x *CustomNumericValue) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CustomNumericValue) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CustomSegmentValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (x *CustomSegmentValues) Reset() {
	*x = CustomSegmentValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomSegmentValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomSegmentValues) ProtoMessage() {}

func (x *CustomSegmentValues) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomSegmentValues.ProtoReflect.Descriptor instead.
func (*CustomSegmentValues) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{16}
}

func (x *CustomSegmentValues) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CustomSegmentValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// SQL
type SqlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int64                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Sql         *string                 `protobuf:"bytes,2,opt,name=sql" json:"sql,omitempty"`
	StartTime   *int64                  `protobuf:"varint,3,opt,name=startTime" json:"startTime,omitempty"`
	EndTime     *int64                  `protobuf:"varint,4,opt,name=endTime" json:"endTime,omitempty"`
	Count       *int32                  `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	QueryAvg    *int64                  `protobuf:"varint,6,opt,name=queryAvg" json:"queryAvg,omitempty"`
	QueryMin    *int64                  `protobuf:"varint,7,opt,name=queryMin" json:"queryMin,omitempty"`
	QueryMax    *int64                  `protobuf:"varint,8,opt,name=queryMax" json:"queryMax,omitempty"`
	ServerUrl   *string                 `protobuf:"bytes,9,opt,name=serverUrl" json:"serverUrl,omitempty"`
	FetchCount  *int32                  `protobuf:"varint,10,opt,name=fetchCount,def=0" json:"fetchCount,omitempty"`
	FetchAvg    *int64                  `protobuf:"varint,11,opt,name=fetchAvg,def=0" json:"fetchAvg,omitempty"`
	FetchMin    *int64                  `protobuf:"varint,12,opt,name=fetchMin,def=0" json:"fetchMin,omitempty"`
	FetchMax    *int64                  `protobuf:"varint,13,opt,name=fetchMax,def=0" json:"fetchMax,omitempty"`
	SqlId       *int32                  `protobuf:"varint,14,opt,name=sqlId" json:"sqlId,omitempty"`
	UrlId       *int32                  `protobuf:"varint,15,opt,name=urlId" json:"urlId,omitempty"`
	ReqUuid     *string                 `protobuf:"bytes,16,opt,name=reqUuid" json:"reqUuid,omitempty"` // t.uuid + "-" + req.id
	RequestType *SqlRequest_RequestType `protobuf:"varint,17,opt,name=requestType,enum=SqlRequest_RequestType" json:"requestType,omitempty"`
	Parameters  []string                `protobuf:"bytes,18,rep,name=parameters" json:"parameters,omitempty"`
}

// Default values for SqlRequest fields.
const (
	Default_SqlRequest_FetchCount = int32(0)
	Default_SqlRequest_FetchAvg   = int64(0)
	Default_SqlRequest_FetchMin   = int64(0)
	Default_SqlRequest_FetchMax   = int64(0)
)

func (x *SqlRequest) Reset() {
	*x = SqlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlRequest) ProtoMessage() {}

func (x *SqlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlRequest.ProtoReflect.Descriptor instead.
func (*SqlRequest) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{17}
}

func (x *SqlRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SqlRequest) GetSql() string {
	if x != nil && x.Sql != nil {
		return *x.Sql
	}
	return ""
}

func (x *SqlRequest) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *SqlRequest) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *SqlRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *SqlRequest) GetQueryAvg() int64 {
	if x != nil && x.QueryAvg != nil {
		return *x.QueryAvg
	}
	return 0
}

func (x *SqlRequest) GetQueryMin() int64 {
	if x != nil && x.QueryMin != nil {
		return *x.QueryMin
	}
	return 0
}

func (x *SqlRequest) GetQueryMax() int64 {
	if x != nil && x.QueryMax != nil {
		return *x.QueryMax
	}
	return 0
}

func (x *SqlRequest) GetServerUrl() string {
	if x != nil && x.ServerUrl != nil {
		return *x.ServerUrl
	}
	return ""
}

func (x *SqlRequest) GetFetchCount() int32 {
	if x != nil && x.FetchCount != nil {
		return *x.FetchCount
	}
	return Default_SqlRequest_FetchCount
}

func (x *SqlRequest) GetFetchAvg() int64 {
	if x != nil && x.FetchAvg != nil {
		return *x.FetchAvg
	}
	return Default_SqlRequest_FetchAvg
}

func (x *SqlRequest) GetFetchMin() int64 {
	if x != nil && x.FetchMin != nil {
		return *x.FetchMin
	}
	return Default_SqlRequest_FetchMin
}

func (x *SqlRequest) GetFetchMax() int64 {
	if x != nil && x.FetchMax != nil {
		return *x.FetchMax
	}
	return Default_SqlRequest_FetchMax
}

func (x *SqlRequest) GetSqlId() int32 {
	if x != nil && x.SqlId != nil {
		return *x.SqlId
	}
	return 0
}

func (x *SqlRequest) GetUrlId() int32 {
	if x != nil && x.UrlId != nil {
		return *x.UrlId
	}
	return 0
}

func (x *SqlRequest) GetReqUuid() string {
	if x != nil && x.ReqUuid != nil {
		return *x.ReqUuid
	}
	return ""
}

func (x *SqlRequest) GetRequestType() SqlRequest_RequestType {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return SqlRequest_JDBC
}

func (x *SqlRequest) GetParameters() []string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// JMS
type JMSMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int64              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	QueueId   *int32              `protobuf:"varint,2,opt,name=queueId" json:"queueId,omitempty"`
	QueueName *string             `protobuf:"bytes,3,opt,name=queueName" json:"queueName,omitempty"`
	UrlId     *int32              `protobuf:"varint,4,opt,name=urlId" json:"urlId,omitempty"`
	UrlName   *string             `protobuf:"bytes,5,opt,name=urlName" json:"urlName,omitempty"`
	StartTime *int64              `protobuf:"varint,6,opt,name=startTime" json:"startTime,omitempty"`
	EndTime   *int64              `protobuf:"varint,7,opt,name=endTime" json:"endTime,omitempty"`
	Status    *Status             `protobuf:"varint,8,opt,name=status,enum=Status,def=0" json:"status,omitempty"`
	JmsType   *JMSMessage_JMSType `protobuf:"varint,9,opt,name=jmsType,enum=JMSMessage_JMSType" json:"jmsType,omitempty"`
	JmsUuid   *string             `protobuf:"bytes,10,opt,name=jmsUuid" json:"jmsUuid,omitempty"`
}

// Default values for JMSMessage fields.
const (
	Default_JMSMessage_Status = Status_OK
)

func (x *JMSMessage) Reset() {
	*x = JMSMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JMSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JMSMessage) ProtoMessage() {}

func (x *JMSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JMSMessage.ProtoReflect.Descriptor instead.
func (*JMSMessage) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{18}
}

func (x *JMSMessage) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *JMSMessage) GetQueueId() int32 {
	if x != nil && x.QueueId != nil {
		return *x.QueueId
	}
	return 0
}

func (x *JMSMessage) GetQueueName() string {
	if x != nil && x.QueueName != nil {
		return *x.QueueName
	}
	return ""
}

func (x *JMSMessage) GetUrlId() int32 {
	if x != nil && x.UrlId != nil {
		return *x.UrlId
	}
	return 0
}

func (x *JMSMessage) GetUrlName() string {
	if x != nil && x.UrlName != nil {
		return *x.UrlName
	}
	return ""
}

func (x *JMSMessage) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *JMSMessage) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *JMSMessage) GetStatus() Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_JMSMessage_Status
}

func (x *JMSMessage) GetJmsType() JMSMessage_JMSType {
	if x != nil && x.JmsType != nil {
		return *x.JmsType
	}
	return JMSMessage_QUEUE
}

func (x *JMSMessage) GetJmsUuid() string {
	if x != nil && x.JmsUuid != nil {
		return *x.JmsUuid
	}
	return ""
}

// WebService
type WSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Url         *string           `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Method      *string           `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	CodeInvoker *string           `protobuf:"bytes,4,opt,name=codeInvoker" json:"codeInvoker,omitempty"`
	StartTime   *int64            `protobuf:"varint,5,opt,name=startTime" json:"startTime,omitempty"`
	EndTime     *int64            `protobuf:"varint,6,opt,name=endTime" json:"endTime,omitempty"`
	Status      *Status           `protobuf:"varint,7,opt,name=status,enum=Status,def=0" json:"status,omitempty"`
	WsType      *WSRequest_WSType `protobuf:"varint,8,opt,name=wsType,enum=WSRequest_WSType" json:"wsType,omitempty"`
	WsUuid      *string           `protobuf:"bytes,9,opt,name=wsUuid" json:"wsUuid,omitempty"`
}

// Default values for WSRequest fields.
const (
	Default_WSRequest_Status = Status_OK
)

func (x *WSRequest) Reset() {
	*x = WSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WSRequest) ProtoMessage() {}

func (x *WSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WSRequest.ProtoReflect.Descriptor instead.
func (*WSRequest) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{19}
}

func (x *WSRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *WSRequest) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *WSRequest) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *WSRequest) GetCodeInvoker() string {
	if x != nil && x.CodeInvoker != nil {
		return *x.CodeInvoker
	}
	return ""
}

func (x *WSRequest) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *WSRequest) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *WSRequest) GetStatus() Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_WSRequest_Status
}

func (x *WSRequest) GetWsType() WSRequest_WSType {
	if x != nil && x.WsType != nil {
		return *x.WsType
	}
	return WSRequest_SOAP
}

func (x *WSRequest) GetWsUuid() string {
	if x != nil && x.WsUuid != nil {
		return *x.WsUuid
	}
	return ""
}

// GENERIC METRIC
type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group      *string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Name       *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	CallCount  *int32  `protobuf:"varint,3,req,name=callCount" json:"callCount,omitempty"`
	ErrorCount *int32  `protobuf:"varint,4,req,name=errorCount" json:"errorCount,omitempty"`
	MaxTime    *int64  `protobuf:"varint,5,req,name=maxTime" json:"maxTime,omitempty"`
	MinTime    *int64  `protobuf:"varint,6,req,name=minTime" json:"minTime,omitempty"`
	AvgTime    *int64  `protobuf:"varint,7,req,name=avgTime" json:"avgTime,omitempty"`
	FirstCall  *int64  `protobuf:"varint,8,req,name=firstCall" json:"firstCall,omitempty"`
	LastCall   *int64  `protobuf:"varint,9,req,name=lastCall" json:"lastCall,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{20}
}

func (x *Metric) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *Metric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Metric) GetCallCount() int32 {
	if x != nil && x.CallCount != nil {
		return *x.CallCount
	}
	return 0
}

func (x *Metric) GetErrorCount() int32 {
	if x != nil && x.ErrorCount != nil {
		return *x.ErrorCount
	}
	return 0
}

func (x *Metric) GetMaxTime() int64 {
	if x != nil && x.MaxTime != nil {
		return *x.MaxTime
	}
	return 0
}

func (x *Metric) GetMinTime() int64 {
	if x != nil && x.MinTime != nil {
		return *x.MinTime
	}
	return 0
}

func (x *Metric) GetAvgTime() int64 {
	if x != nil && x.AvgTime != nil {
		return *x.AvgTime
	}
	return 0
}

func (x *Metric) GetFirstCall() int64 {
	if x != nil && x.FirstCall != nil {
		return *x.FirstCall
	}
	return 0
}

func (x *Metric) GetLastCall() int64 {
	if x != nil && x.LastCall != nil {
		return *x.LastCall
	}
	return 0
}

// GENERIC PARAM
type Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Type  *string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (x *Param) Reset() {
	*x = Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Param) ProtoMessage() {}

func (x *Param) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Param.ProtoReflect.Descriptor instead.
func (*Param) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{21}
}

func (x *Param) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Param) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Param) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

// ERROR
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId  *string `protobuf:"bytes,1,opt,name=serverId" json:"serverId,omitempty"`
	Code      *string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	StartTime *int64  `protobuf:"varint,3,opt,name=startTime" json:"startTime,omitempty"`
	Message   *string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	// stack trace in old format : splitted with # and without cause(s)
	//
	// Deprecated: Do not use.
	Stacktrace *string `protobuf:"bytes,5,opt,name=stacktrace" json:"stacktrace,omitempty"`
	// stack trace as string, as provided by JVM
	JvmStacktrace *string `protobuf:"bytes,6,opt,name=jvmStacktrace" json:"jvmStacktrace,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{22}
}

func (x *Error) GetServerId() string {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return ""
}

func (x *Error) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Error) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// Deprecated: Do not use.
func (x *Error) GetStacktrace() string {
	if x != nil && x.Stacktrace != nil {
		return *x.Stacktrace
	}
	return ""
}

func (x *Error) GetJvmStacktrace() string {
	if x != nil && x.JvmStacktrace != nil {
		return *x.JvmStacktrace
	}
	return ""
}

// STACKTRACE SAMPLING
type MethodCallSamplig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       *string `protobuf:"bytes,1,req,name=url" json:"url,omitempty"`
	TimeStamp *int64  `protobuf:"varint,2,req,name=timeStamp" json:"timeStamp,omitempty"`
	Status    *string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Frame1    *string `protobuf:"bytes,4,opt,name=frame1" json:"frame1,omitempty"`
	Frame2    *string `protobuf:"bytes,5,opt,name=frame2" json:"frame2,omitempty"`
	Frame3    *string `protobuf:"bytes,6,opt,name=frame3" json:"frame3,omitempty"`
}

func (x *MethodCallSamplig) Reset() {
	*x = MethodCallSamplig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodCallSamplig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodCallSamplig) ProtoMessage() {}

func (x *MethodCallSamplig) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodCallSamplig.ProtoReflect.Descriptor instead.
func (*MethodCallSamplig) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{23}
}

func (x *MethodCallSamplig) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *MethodCallSamplig) GetTimeStamp() int64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *MethodCallSamplig) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *MethodCallSamplig) GetFrame1() string {
	if x != nil && x.Frame1 != nil {
		return *x.Frame1
	}
	return ""
}

func (x *MethodCallSamplig) GetFrame2() string {
	if x != nil && x.Frame2 != nil {
		return *x.Frame2
	}
	return ""
}

func (x *MethodCallSamplig) GetFrame3() string {
	if x != nil && x.Frame3 != nil {
		return *x.Frame3
	}
	return ""
}

// METRIC (system, JMX..)
type ItemMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	TimeStamp *int64  `protobuf:"varint,2,req,name=timeStamp" json:"timeStamp,omitempty"`
	Value     *string `protobuf:"bytes,3,req,name=value" json:"value,omitempty"`
}

func (x *ItemMetric) Reset() {
	*x = ItemMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemMetric) ProtoMessage() {}

func (x *ItemMetric) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemMetric.ProtoReflect.Descriptor instead.
func (*ItemMetric) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{24}
}

func (x *ItemMetric) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ItemMetric) GetTimeStamp() int64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *ItemMetric) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// JMX
type MBean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectName     *string               `protobuf:"bytes,1,req,name=objectName" json:"objectName,omitempty"`
	AttributeInfo  []*MBeanAttributeInfo `protobuf:"bytes,2,rep,name=attributeInfo" json:"attributeInfo,omitempty"`
	CollectingTime *int64                `protobuf:"varint,3,req,name=collectingTime" json:"collectingTime,omitempty"`
}

func (x *MBean) Reset() {
	*x = MBean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBean) ProtoMessage() {}

func (x *MBean) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBean.ProtoReflect.Descriptor instead.
func (*MBean) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{25}
}

func (x *MBean) GetObjectName() string {
	if x != nil && x.ObjectName != nil {
		return *x.ObjectName
	}
	return ""
}

func (x *MBean) GetAttributeInfo() []*MBeanAttributeInfo {
	if x != nil {
		return x.AttributeInfo
	}
	return nil
}

func (x *MBean) GetCollectingTime() int64 {
	if x != nil && x.CollectingTime != nil {
		return *x.CollectingTime
	}
	return 0
}

type MBeanAttributeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value         *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	Description   *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Type          *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	IsReadable    *bool   `protobuf:"varint,5,opt,name=isReadable" json:"isReadable,omitempty"`
	IsWritable    *bool   `protobuf:"varint,6,opt,name=isWritable" json:"isWritable,omitempty"`
	IsIs          *bool   `protobuf:"varint,7,opt,name=isIs" json:"isIs,omitempty"`
	NameId        *int32  `protobuf:"varint,8,opt,name=nameId" json:"nameId,omitempty"`
	TypeId        *int32  `protobuf:"varint,9,opt,name=typeId" json:"typeId,omitempty"`
	DescriptionId *int32  `protobuf:"varint,10,opt,name=descriptionId" json:"descriptionId,omitempty"`
}

func (x *MBeanAttributeInfo) Reset() {
	*x = MBeanAttributeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBeanAttributeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBeanAttributeInfo) ProtoMessage() {}

func (x *MBeanAttributeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBeanAttributeInfo.ProtoReflect.Descriptor instead.
func (*MBeanAttributeInfo) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{26}
}

func (x *MBeanAttributeInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MBeanAttributeInfo) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *MBeanAttributeInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MBeanAttributeInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *MBeanAttributeInfo) GetIsReadable() bool {
	if x != nil && x.IsReadable != nil {
		return *x.IsReadable
	}
	return false
}

func (x *MBeanAttributeInfo) GetIsWritable() bool {
	if x != nil && x.IsWritable != nil {
		return *x.IsWritable
	}
	return false
}

func (x *MBeanAttributeInfo) GetIsIs() bool {
	if x != nil && x.IsIs != nil {
		return *x.IsIs
	}
	return false
}

func (x *MBeanAttributeInfo) GetNameId() int32 {
	if x != nil && x.NameId != nil {
		return *x.NameId
	}
	return 0
}

func (x *MBeanAttributeInfo) GetTypeId() int32 {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return 0
}

func (x *MBeanAttributeInfo) GetDescriptionId() int32 {
	if x != nil && x.DescriptionId != nil {
		return *x.DescriptionId
	}
	return 0
}

type Dictionary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dictionary []*Dictionary_DictionaryEntry `protobuf:"bytes,1,rep,name=dictionary" json:"dictionary,omitempty"`
}

func (x *Dictionary) Reset() {
	*x = Dictionary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dictionary) ProtoMessage() {}

func (x *Dictionary) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dictionary.ProtoReflect.Descriptor instead.
func (*Dictionary) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{27}
}

func (x *Dictionary) GetDictionary() []*Dictionary_DictionaryEntry {
	if x != nil {
		return x.Dictionary
	}
	return nil
}

// Troubleshooting Events (Full GC, Memory leaks...)
type TroubleshootingEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *TroubleshootingEvents_EventType `protobuf:"varint,1,req,name=type,enum=TroubleshootingEvents_EventType" json:"type,omitempty"`
	Timestamp      *int64                           `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	UuidAssociated *string                          `protobuf:"bytes,3,opt,name=uuidAssociated" json:"uuidAssociated,omitempty"` // uuid d'une transaction associé à l'event
	ThreadInfos    []*ThreadInfo                    `protobuf:"bytes,4,rep,name=threadInfos" json:"threadInfos,omitempty"`       // Echantillonnage des stackTraces
}

func (x *TroubleshootingEvents) Reset() {
	*x = TroubleshootingEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TroubleshootingEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TroubleshootingEvents) ProtoMessage() {}

func (x *TroubleshootingEvents) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TroubleshootingEvents.ProtoReflect.Descriptor instead.
func (*TroubleshootingEvents) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{28}
}

func (x *TroubleshootingEvents) GetType() TroubleshootingEvents_EventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TroubleshootingEvents_ConnectionLeak
}

func (x *TroubleshootingEvents) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *TroubleshootingEvents) GetUuidAssociated() string {
	if x != nil && x.UuidAssociated != nil {
		return *x.UuidAssociated
	}
	return ""
}

func (x *TroubleshootingEvents) GetThreadInfos() []*ThreadInfo {
	if x != nil {
		return x.ThreadInfos
	}
	return nil
}

// System metrics
type SystemMetricSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Timestamp   *int64   `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	DoubleValue *float64 `protobuf:"fixed64,3,opt,name=doubleValue" json:"doubleValue,omitempty"`
	LongValue   *int64   `protobuf:"varint,4,opt,name=longValue" json:"longValue,omitempty"`
}

func (x *SystemMetricSample) Reset() {
	*x = SystemMetricSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemMetricSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMetricSample) ProtoMessage() {}

func (x *SystemMetricSample) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMetricSample.ProtoReflect.Descriptor instead.
func (*SystemMetricSample) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{29}
}

func (x *SystemMetricSample) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SystemMetricSample) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *SystemMetricSample) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *SystemMetricSample) GetLongValue() int64 {
	if x != nil && x.LongValue != nil {
		return *x.LongValue
	}
	return 0
}

type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// component unique identifier.
	// for single file-based components : use file hash.
	// for "soft-based" components using php composer : use composer .json descriptor coordinates
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// for file-based components (.jar)
	FileName *string `protobuf:"bytes,2,opt,name=fileName" json:"fileName,omitempty"`
	FileSha1 *string `protobuf:"bytes,3,opt,name=fileSha1" json:"fileSha1,omitempty"`
	// for maven-based components.
	// can have multiple values for shaded or "fat-jars"
	MavenComponents []*MavenComponent `protobuf:"bytes,4,rep,name=mavenComponents" json:"mavenComponents,omitempty"`
	// for .jar manifest entries, may help to detect OSGI packages
	JarManifest []*KeyValue `protobuf:"bytes,5,rep,name=jarManifest" json:"jarManifest,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{30}
}

func (x *Component) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Component) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *Component) GetFileSha1() string {
	if x != nil && x.FileSha1 != nil {
		return *x.FileSha1
	}
	return ""
}

func (x *Component) GetMavenComponents() []*MavenComponent {
	if x != nil {
		return x.MavenComponents
	}
	return nil
}

func (x *Component) GetJarManifest() []*KeyValue {
	if x != nil {
		return x.JarManifest
	}
	return nil
}

// maven coordinates
type MavenComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    *string `protobuf:"bytes,1,opt,name=groupId" json:"groupId,omitempty"`
	ArtifactId *string `protobuf:"bytes,2,opt,name=artifactId" json:"artifactId,omitempty"`
	Version    *string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
}

func (x *MavenComponent) Reset() {
	*x = MavenComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MavenComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MavenComponent) ProtoMessage() {}

func (x *MavenComponent) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MavenComponent.ProtoReflect.Descriptor instead.
func (*MavenComponent) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{31}
}

func (x *MavenComponent) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *MavenComponent) GetArtifactId() string {
	if x != nil && x.ArtifactId != nil {
		return *x.ArtifactId
	}
	return ""
}

func (x *MavenComponent) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type ThreadInfo_StackTraceElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName    *string `protobuf:"bytes,1,opt,name=className" json:"className,omitempty"`
	MethodName   *string `protobuf:"bytes,2,opt,name=methodName" json:"methodName,omitempty"`
	LineNumber   *int32  `protobuf:"varint,3,opt,name=lineNumber" json:"lineNumber,omitempty"`
	ClassNameId  *int32  `protobuf:"varint,4,opt,name=classNameId" json:"classNameId,omitempty"`
	MethodNameId *int32  `protobuf:"varint,5,opt,name=methodNameId" json:"methodNameId,omitempty"`
}

func (x *ThreadInfo_StackTraceElement) Reset() {
	*x = ThreadInfo_StackTraceElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadInfo_StackTraceElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadInfo_StackTraceElement) ProtoMessage() {}

func (x *ThreadInfo_StackTraceElement) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadInfo_StackTraceElement.ProtoReflect.Descriptor instead.
func (*ThreadInfo_StackTraceElement) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ThreadInfo_StackTraceElement) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *ThreadInfo_StackTraceElement) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

func (x *ThreadInfo_StackTraceElement) GetLineNumber() int32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

func (x *ThreadInfo_StackTraceElement) GetClassNameId() int32 {
	if x != nil && x.ClassNameId != nil {
		return *x.ClassNameId
	}
	return 0
}

func (x *ThreadInfo_StackTraceElement) GetMethodNameId() int32 {
	if x != nil && x.MethodNameId != nil {
		return *x.MethodNameId
	}
	return 0
}

type Dictionary_DictionaryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Id   *int32  `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
}

func (x *Dictionary_DictionaryEntry) Reset() {
	*x = Dictionary_DictionaryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rawdata_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dictionary_DictionaryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dictionary_DictionaryEntry) ProtoMessage() {}

func (x *Dictionary_DictionaryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_rawdata_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dictionary_DictionaryEntry.ProtoReflect.Descriptor instead.
func (*Dictionary_DictionaryEntry) Descriptor() ([]byte, []int) {
	return file_rawdata_proto_rawDescGZIP(), []int{27, 0}
}

func (x *Dictionary_DictionaryEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Dictionary_DictionaryEntry) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

var File_rawdata_proto protoreflect.FileDescriptor

var file_rawdata_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x61, 0x77, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x99, 0x09, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x70,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x48,
	0x65, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x70, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x0a, 0x67, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x47, 0x63, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x67, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x37, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x67, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x0b,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x1c, 0x0a, 0x05, 0x6d, 0x42, 0x65, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x4d, 0x42, 0x65, 0x61, 0x6e, 0x52, 0x05, 0x6d, 0x42, 0x65, 0x61, 0x6e, 0x12,
	0x39, 0x0a, 0x11, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x11, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x0f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x35, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52,
	0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x29, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0f,
	0x6d, 0x62, 0x65, 0x61, 0x6e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x0f, 0x6d, 0x62, 0x65, 0x61, 0x6e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x0d, 0x6a, 0x6d, 0x73, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x6a, 0x6d, 0x73, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x15, 0x74, 0x72, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73,
	0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x15, 0x74,
	0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x2a, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc0, 0x06, 0x0a, 0x0c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x06,
	0x6f, 0x73, 0x41, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x06, 0x6f, 0x73, 0x41, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x6f, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x09, 0x76, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x76, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x76, 0x6d, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x6c, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x64, 0x67, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x75,
	0x64, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x07, 0x6a, 0x76,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4a, 0x76,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6a, 0x76, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa5,
	0x01, 0x0a, 0x07, 0x4a, 0x76, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x35, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x58, 0x0a, 0x0a, 0x48, 0x65,
	0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0a, 0x47, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xea, 0x01,
	0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x11, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd7, 0x04, 0x0a, 0x0a, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61,
	0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x61, 0x69,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x02, 0x2d,
	0x31, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xb7, 0x01,
	0x0a, 0x11, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x55, 0x4e,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x22, 0x37, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x35, 0x0a,
	0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x72, 0x6f, 0x6f,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x22, 0x5d, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x95, 0x19, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x65, 0x67, 0x31, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x65, 0x67,
	0x31, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x65, 0x67, 0x32, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x65, 0x67, 0x32, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x06, 0x73, 0x65, 0x67, 0x33, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x65, 0x67, 0x33, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x02, 0x4f, 0x4b, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0a, 0x64, 0x62, 0x43, 0x6e, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0a, 0x64, 0x62, 0x43, 0x6e, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x64,
	0x62, 0x43, 0x6e, 0x78, 0x41, 0x76, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x64, 0x62, 0x43, 0x6e, 0x78, 0x41, 0x76, 0x67, 0x12, 0x21,
	0x0a, 0x08, 0x64, 0x62, 0x43, 0x6e, 0x78, 0x4d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x64, 0x62, 0x43, 0x6e, 0x78, 0x4d, 0x69,
	0x6e, 0x12, 0x21, 0x0a, 0x08, 0x64, 0x62, 0x43, 0x6e, 0x78, 0x4d, 0x61, 0x78, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x64, 0x62, 0x43, 0x6e,
	0x78, 0x4d, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0c, 0x64, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0a, 0x64, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x67, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x64, 0x62, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x76, 0x67, 0x12, 0x25, 0x0a, 0x0a, 0x64, 0x62, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0a, 0x64, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x12, 0x25, 0x0a,
	0x0a, 0x64, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x64, 0x62, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x62, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0c, 0x64, 0x62, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x0b, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0d, 0x64, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0d, 0x64, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0b, 0x64, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x76, 0x67, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x64, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x76, 0x67, 0x12, 0x27, 0x0a, 0x0b, 0x64, 0x62, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x64, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x69,
	0x6e, 0x12, 0x27, 0x0a, 0x0b, 0x64, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x78,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x64,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a, 0x0f, 0x64, 0x62,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x64, 0x62, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x64,
	0x62, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x76, 0x67, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x64, 0x62, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x76, 0x67, 0x12, 0x2b, 0x0a, 0x0d, 0x64, 0x62, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x3a,
	0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x64, 0x62, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x0d, 0x64, 0x62, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x61, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0d, 0x64, 0x62, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d,
	0x61, 0x78, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c,
	0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x12,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x30, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x11, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x78, 0x49, 0x64, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x78, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x2f, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x32,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0a, 0x64, 0x62, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x41, 0x76, 0x67, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0a, 0x64, 0x62, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x76, 0x67, 0x12, 0x25, 0x0a,
	0x0a, 0x64, 0x62, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x64, 0x62, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4d, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0a, 0x64, 0x62, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x61, 0x78, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0a, 0x64, 0x62, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65,
	0x72, 0x68, 0x65, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x50, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x70, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x70, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x58, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x72, 0x6c, 0x49, 0x44, 0x18, 0x59, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x75, 0x72,
	0x6c, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x07, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x77,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x77, 0x73, 0x41, 0x76, 0x67, 0x18,
	0x5c, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x77, 0x73,
	0x41, 0x76, 0x67, 0x12, 0x1b, 0x0a, 0x05, 0x77, 0x73, 0x4d, 0x69, 0x6e, 0x18, 0x5d, 0x20, 0x01,
	0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x77, 0x73, 0x4d, 0x69, 0x6e,
	0x12, 0x1b, 0x0a, 0x05, 0x77, 0x73, 0x4d, 0x61, 0x78, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x03, 0x3a,
	0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x77, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x2e, 0x0a,
	0x0a, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x5f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x57, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0a, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x4a, 0x4d, 0x53, 0x18, 0x60, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4a, 0x4d, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x4a, 0x4d, 0x53,
	0x12, 0x31, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x4a, 0x4d, 0x53, 0x18,
	0x61, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4a, 0x4d, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64,
	0x4a, 0x4d, 0x53, 0x12, 0x29, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x4a, 0x4d, 0x53, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x4a, 0x4d, 0x53, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x4a, 0x4d, 0x53, 0x41, 0x76, 0x67, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x4a,
	0x4d, 0x53, 0x41, 0x76, 0x67, 0x12, 0x25, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x4a, 0x4d, 0x53,
	0x4d, 0x69, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x4a, 0x4d, 0x53, 0x4d, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x4a, 0x4d, 0x53, 0x4d, 0x61, 0x78, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03,
	0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x4a, 0x4d, 0x53,
	0x4d, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x4a, 0x4d, 0x53, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x4a, 0x4d, 0x53, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4a, 0x4d, 0x53, 0x41, 0x76, 0x67, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4a,
	0x4d, 0x53, 0x41, 0x76, 0x67, 0x12, 0x25, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4a, 0x4d, 0x53,
	0x4d, 0x69, 0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4a, 0x4d, 0x53, 0x4d, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x4a, 0x4d, 0x53, 0x4d, 0x61, 0x78, 0x18, 0x69, 0x20, 0x01, 0x28, 0x03,
	0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x4a, 0x4d, 0x53,
	0x4d, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0c, 0x64, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39,
	0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x6b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x6c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x6d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x6e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x72,
	0x65, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x70, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0a,
	0x72, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x18, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x4b, 0x4f, 0x10, 0x01, 0x22, 0x3d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x51, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x02, 0x22, 0x62, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53,
	0x54, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x07, 0x22, 0xaf, 0x01, 0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x0b, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x22, 0x3c, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x3f, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0xb3, 0x04, 0x0a, 0x0a, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x71, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x61, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x41, 0x76,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x41, 0x76, 0x67, 0x12, 0x1d, 0x0a, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x72, 0x6c, 0x49,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x75, 0x72, 0x6c, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x55, 0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x55, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x22, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x44, 0x42, 0x43, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x01, 0x22, 0xcb, 0x02, 0x0a, 0x0a, 0x4a, 0x4d, 0x53, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x72, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x75,
	0x72, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x02, 0x4f, 0x4b, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6a,
	0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x4a,
	0x4d, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4a, 0x4d, 0x53, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x6a, 0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6d,
	0x73, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6d, 0x73,
	0x55, 0x75, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x07, 0x4a, 0x4d, 0x53, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f,
	0x50, 0x49, 0x43, 0x10, 0x01, 0x22, 0xb5, 0x02, 0x0a, 0x09, 0x57, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x02, 0x4f, 0x4b, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x06,
	0x77, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x57,
	0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x53, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x77, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x73, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x73, 0x55, 0x75, 0x69, 0x64, 0x22,
	0x2c, 0x0a, 0x06, 0x57, 0x53, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x41,
	0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x4f, 0x41, 0x50, 0x4a, 0x41, 0x58, 0x52, 0x50, 0x43, 0x10, 0x02, 0x22, 0xf8, 0x01,
	0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x61, 0x76, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x43, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb9, 0x01,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x76, 0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a, 0x76, 0x6d, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x31, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x33, 0x22,
	0x52, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x4d, 0x42, 0x65, 0x61, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x42, 0x65, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x9e, 0x02, 0x0a, 0x12, 0x4d, 0x42, 0x65, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x49, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x49, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x1a, 0x35, 0x0a,
	0x0f, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x54,
	0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x75, 0x69, 0x64, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x75, 0x69, 0x64,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x30, 0x0a, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x6b, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x10, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x12,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x31, 0x12, 0x39, 0x0a, 0x0f, 0x6d, 0x61,
	0x76, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x61, 0x76, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6d, 0x61, 0x76, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0b, 0x6a, 0x61, 0x72, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6a, 0x61, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x22, 0x64, 0x0a, 0x0e, 0x4d, 0x61, 0x76, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x18, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x4f,
	0x10, 0x01, 0x42, 0x09, 0x48, 0x01, 0x5a, 0x05, 0x2f, 0x74, 0x65, 0x73, 0x74,
}

var (
	file_rawdata_proto_rawDescOnce sync.Once
	file_rawdata_proto_rawDescData = file_rawdata_proto_rawDesc
)

func file_rawdata_proto_rawDescGZIP() []byte {
	file_rawdata_proto_rawDescOnce.Do(func() {
		file_rawdata_proto_rawDescData = protoimpl.X.CompressGZIP(file_rawdata_proto_rawDescData)
	})
	return file_rawdata_proto_rawDescData
}

var file_rawdata_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_rawdata_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_rawdata_proto_goTypes = []interface{}{
	(Status)(0),                          // 0: Status
	(ThreadInfo_State)(0),                // 1: ThreadInfo.State
	(Transaction_Status)(0),              // 2: Transaction.Status
	(Transaction_Type)(0),                // 3: Transaction.Type
	(Transaction_ReqMethod)(0),           // 4: Transaction.ReqMethod
	(SqlRequest_RequestType)(0),          // 5: SqlRequest.RequestType
	(JMSMessage_JMSType)(0),              // 6: JMSMessage.JMSType
	(WSRequest_WSType)(0),                // 7: WSRequest.WSType
	(TroubleshootingEvents_EventType)(0), // 8: TroubleshootingEvents.EventType
	(*RawData)(nil),                      // 9: RawData
	(*ServerConfig)(nil),                 // 10: ServerConfig
	(*JvmInfo)(nil),                      // 11: JvmInfo
	(*KeyValue)(nil),                     // 12: KeyValue
	(*HeapMemory)(nil),                   // 13: HeapMemory
	(*GcActivity)(nil),                   // 14: GcActivity
	(*ThreadActivity)(nil),               // 15: ThreadActivity
	(*ThreadInfo)(nil),                   // 16: ThreadInfo
	(*ThreadInfoList)(nil),               // 17: ThreadInfoList
	(*CallTree)(nil),                     // 18: CallTree
	(*CallTreeNode)(nil),                 // 19: CallTreeNode
	(*SessionActivity)(nil),              // 20: SessionActivity
	(*Transaction)(nil),                  // 21: Transaction
	(*Layer)(nil),                        // 22: Layer
	(*LayerDetail)(nil),                  // 23: LayerDetail
	(*CustomNumericValue)(nil),           // 24: CustomNumericValue
	(*CustomSegmentValues)(nil),          // 25: CustomSegmentValues
	(*SqlRequest)(nil),                   // 26: SqlRequest
	(*JMSMessage)(nil),                   // 27: JMSMessage
	(*WSRequest)(nil),                    // 28: WSRequest
	(*Metric)(nil),                       // 29: Metric
	(*Param)(nil),                        // 30: Param
	(*Error)(nil),                        // 31: Error
	(*MethodCallSamplig)(nil),            // 32: MethodCallSamplig
	(*ItemMetric)(nil),                   // 33: ItemMetric
	(*MBean)(nil),                        // 34: MBean
	(*MBeanAttributeInfo)(nil),           // 35: MBeanAttributeInfo
	(*Dictionary)(nil),                   // 36: Dictionary
	(*TroubleshootingEvents)(nil),        // 37: TroubleshootingEvents
	(*SystemMetricSample)(nil),           // 38: SystemMetricSample
	(*Component)(nil),                    // 39: Component
	(*MavenComponent)(nil),               // 40: MavenComponent
	(*ThreadInfo_StackTraceElement)(nil), // 41: ThreadInfo.StackTraceElement
	(*Dictionary_DictionaryEntry)(nil),   // 42: Dictionary.DictionaryEntry
}
var file_rawdata_proto_depIdxs = []int32{
	10, // 0: RawData.serverConfig:type_name -> ServerConfig
	13, // 1: RawData.heapMemory:type_name -> HeapMemory
	14, // 2: RawData.gcActivity:type_name -> GcActivity
	15, // 3: RawData.threadActivity:type_name -> ThreadActivity
	20, // 4: RawData.sessionActivity:type_name -> SessionActivity
	21, // 5: RawData.transactions:type_name -> Transaction
	32, // 6: RawData.samples:type_name -> MethodCallSamplig
	33, // 7: RawData.metrics:type_name -> ItemMetric
	16, // 8: RawData.threadInfos:type_name -> ThreadInfo
	34, // 9: RawData.mBean:type_name -> MBean
	36, // 10: RawData.segmentDictionary:type_name -> Dictionary
	36, // 11: RawData.queryDictionary:type_name -> Dictionary
	36, // 12: RawData.classDictionary:type_name -> Dictionary
	36, // 13: RawData.methodDictionary:type_name -> Dictionary
	36, // 14: RawData.userAgent:type_name -> Dictionary
	36, // 15: RawData.mbeanDictionary:type_name -> Dictionary
	36, // 16: RawData.jmsDictionary:type_name -> Dictionary
	37, // 17: RawData.troubleshootingEvents:type_name -> TroubleshootingEvents
	38, // 18: RawData.systemMetrics:type_name -> SystemMetricSample
	39, // 19: RawData.components:type_name -> Component
	11, // 20: ServerConfig.jvmInfo:type_name -> JvmInfo
	12, // 21: JvmInfo.components:type_name -> KeyValue
	12, // 22: JvmInfo.systemProperties:type_name -> KeyValue
	1,  // 23: ThreadInfo.state:type_name -> ThreadInfo.State
	41, // 24: ThreadInfo.frames:type_name -> ThreadInfo.StackTraceElement
	16, // 25: ThreadInfoList.threads:type_name -> ThreadInfo
	19, // 26: CallTree.rootNode:type_name -> CallTreeNode
	19, // 27: CallTreeNode.childs:type_name -> CallTreeNode
	30, // 28: Transaction.params:type_name -> Param
	2,  // 29: Transaction.status:type_name -> Transaction.Status
	31, // 30: Transaction.errors:type_name -> Error
	26, // 31: Transaction.sqlRequests:type_name -> SqlRequest
	3,  // 32: Transaction.type:type_name -> Transaction.Type
	12, // 33: Transaction.extendedCodes:type_name -> KeyValue
	29, // 34: Transaction.metrics:type_name -> Metric
	30, // 35: Transaction.headers:type_name -> Param
	4,  // 36: Transaction.reqMethod:type_name -> Transaction.ReqMethod
	28, // 37: Transaction.wsRequests:type_name -> WSRequest
	27, // 38: Transaction.consumedJMS:type_name -> JMSMessage
	27, // 39: Transaction.producedJMS:type_name -> JMSMessage
	24, // 40: Transaction.numericValues:type_name -> CustomNumericValue
	25, // 41: Transaction.segmentValues:type_name -> CustomSegmentValues
	22, // 42: Transaction.layers:type_name -> Layer
	18, // 43: Transaction.callTree:type_name -> CallTree
	30, // 44: Transaction.reqHeaders:type_name -> Param
	23, // 45: Layer.calls:type_name -> LayerDetail
	12, // 46: LayerDetail.extCodes:type_name -> KeyValue
	5,  // 47: SqlRequest.requestType:type_name -> SqlRequest.RequestType
	0,  // 48: JMSMessage.status:type_name -> Status
	6,  // 49: JMSMessage.jmsType:type_name -> JMSMessage.JMSType
	0,  // 50: WSRequest.status:type_name -> Status
	7,  // 51: WSRequest.wsType:type_name -> WSRequest.WSType
	35, // 52: MBean.attributeInfo:type_name -> MBeanAttributeInfo
	42, // 53: Dictionary.dictionary:type_name -> Dictionary.DictionaryEntry
	8,  // 54: TroubleshootingEvents.type:type_name -> TroubleshootingEvents.EventType
	16, // 55: TroubleshootingEvents.threadInfos:type_name -> ThreadInfo
	40, // 56: Component.mavenComponents:type_name -> MavenComponent
	12, // 57: Component.jarManifest:type_name -> KeyValue
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_rawdata_proto_init() }
func file_rawdata_proto_init() {
	if File_rawdata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rawdata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JvmInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallTreeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomNumericValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomSegmentValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JMSMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodCallSamplig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBeanAttributeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dictionary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TroubleshootingEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemMetricSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MavenComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadInfo_StackTraceElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rawdata_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dictionary_DictionaryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rawdata_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rawdata_proto_goTypes,
		DependencyIndexes: file_rawdata_proto_depIdxs,
		EnumInfos:         file_rawdata_proto_enumTypes,
		MessageInfos:      file_rawdata_proto_msgTypes,
	}.Build()
	File_rawdata_proto = out.File
	file_rawdata_proto_rawDesc = nil
	file_rawdata_proto_goTypes = nil
	file_rawdata_proto_depIdxs = nil
}
