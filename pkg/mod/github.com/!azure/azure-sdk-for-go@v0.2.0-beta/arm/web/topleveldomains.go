package web

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 0.12.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"net/http"
	"net/url"
)

// TopLevelDomainsSiteManagementClient is the use these APIs to manage Azure
// Websites resources through the Azure Resource Manager. All task operations
// conform to the HTTP/1.1 protocol specification and each operation returns
// an x-ms-request-id header that can be used to obtain information about the
// request. You must make sure that requests made to these resources are
// secure. For more information, see <a
// href="https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx">Authenticating
// Azure Resource Manager requests.</a>
type TopLevelDomainsSiteManagementClient struct {
	SiteManagementClient
}

// NewTopLevelDomainsSiteManagementClient creates an instance of the
// TopLevelDomainsSiteManagementClient client.
func NewTopLevelDomainsSiteManagementClient(subscriptionID string) TopLevelDomainsSiteManagementClient {
	return NewTopLevelDomainsSiteManagementClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewTopLevelDomainsSiteManagementClientWithBaseURI creates an instance of
// the TopLevelDomainsSiteManagementClient client.
func NewTopLevelDomainsSiteManagementClientWithBaseURI(baseURI string, subscriptionID string) TopLevelDomainsSiteManagementClient {
	return TopLevelDomainsSiteManagementClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// GetGetTopLevelDomains sends the get get top level domains request.
func (client TopLevelDomainsSiteManagementClient) GetGetTopLevelDomains() (result TopLevelDomainCollection, ae error) {
	req, err := client.GetGetTopLevelDomainsPreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "web/TopLevelDomainsSiteManagementClient", "GetGetTopLevelDomains", "Failure preparing request")
	}

	resp, err := client.GetGetTopLevelDomainsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "web/TopLevelDomainsSiteManagementClient", "GetGetTopLevelDomains", "Failure sending request")
	}

	result, err = client.GetGetTopLevelDomainsResponder(resp)
	if err != nil {
		ae = autorest.NewErrorWithError(err, "web/TopLevelDomainsSiteManagementClient", "GetGetTopLevelDomains", "Failure responding to request")
	}

	return
}

// GetGetTopLevelDomainsPreparer prepares the GetGetTopLevelDomains request.
func (client TopLevelDomainsSiteManagementClient) GetGetTopLevelDomainsPreparer() (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionID),
	}

	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains"),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters))
}

// GetGetTopLevelDomainsSender sends the GetGetTopLevelDomains request. The method will close the
// http.Response Body if it receives an error.
func (client TopLevelDomainsSiteManagementClient) GetGetTopLevelDomainsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, http.StatusOK)
}

// GetGetTopLevelDomainsResponder handles the response to the GetGetTopLevelDomains request. The method always
// closes the http.Response Body.
func (client TopLevelDomainsSiteManagementClient) GetGetTopLevelDomainsResponder(resp *http.Response) (result TopLevelDomainCollection, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetTopLevelDomain sends the get top level domain request.
//
// name is name of the top level domain
func (client TopLevelDomainsSiteManagementClient) GetTopLevelDomain(name string) (result TopLevelDomain, ae error) {
	req, err := client.GetTopLevelDomainPreparer(name)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "web/TopLevelDomainsSiteManagementClient", "GetTopLevelDomain", "Failure preparing request")
	}

	resp, err := client.GetTopLevelDomainSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "web/TopLevelDomainsSiteManagementClient", "GetTopLevelDomain", "Failure sending request")
	}

	result, err = client.GetTopLevelDomainResponder(resp)
	if err != nil {
		ae = autorest.NewErrorWithError(err, "web/TopLevelDomainsSiteManagementClient", "GetTopLevelDomain", "Failure responding to request")
	}

	return
}

// GetTopLevelDomainPreparer prepares the GetTopLevelDomain request.
func (client TopLevelDomainsSiteManagementClient) GetTopLevelDomainPreparer(name string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"name":           url.QueryEscape(name),
		"subscriptionId": url.QueryEscape(client.SubscriptionID),
	}

	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}"),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters))
}

// GetTopLevelDomainSender sends the GetTopLevelDomain request. The method will close the
// http.Response Body if it receives an error.
func (client TopLevelDomainsSiteManagementClient) GetTopLevelDomainSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, http.StatusOK)
}

// GetTopLevelDomainResponder handles the response to the GetTopLevelDomain request. The method always
// closes the http.Response Body.
func (client TopLevelDomainsSiteManagementClient) GetTopLevelDomainResponder(resp *http.Response) (result TopLevelDomain, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListTopLevelDomainAgreements sends the list top level domain agreements
// request.
//
// name is name of the top level domain agreementOption is domain agreement
// options
func (client TopLevelDomainsSiteManagementClient) ListTopLevelDomainAgreements(name string, agreementOption TopLevelDomainAgreementOption) (result TldLegalAgreementCollection, ae error) {
	req, err := client.ListTopLevelDomainAgreementsPreparer(name, agreementOption)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "web/TopLevelDomainsSiteManagementClient", "ListTopLevelDomainAgreements", "Failure preparing request")
	}

	resp, err := client.ListTopLevelDomainAgreementsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "web/TopLevelDomainsSiteManagementClient", "ListTopLevelDomainAgreements", "Failure sending request")
	}

	result, err = client.ListTopLevelDomainAgreementsResponder(resp)
	if err != nil {
		ae = autorest.NewErrorWithError(err, "web/TopLevelDomainsSiteManagementClient", "ListTopLevelDomainAgreements", "Failure responding to request")
	}

	return
}

// ListTopLevelDomainAgreementsPreparer prepares the ListTopLevelDomainAgreements request.
func (client TopLevelDomainsSiteManagementClient) ListTopLevelDomainAgreementsPreparer(name string, agreementOption TopLevelDomainAgreementOption) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"name":           url.QueryEscape(name),
		"subscriptionId": url.QueryEscape(client.SubscriptionID),
	}

	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}/listAgreements"),
		autorest.WithJSON(agreementOption),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters))
}

// ListTopLevelDomainAgreementsSender sends the ListTopLevelDomainAgreements request. The method will close the
// http.Response Body if it receives an error.
func (client TopLevelDomainsSiteManagementClient) ListTopLevelDomainAgreementsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, http.StatusOK)
}

// ListTopLevelDomainAgreementsResponder handles the response to the ListTopLevelDomainAgreements request. The method always
// closes the http.Response Body.
func (client TopLevelDomainsSiteManagementClient) ListTopLevelDomainAgreementsResponder(resp *http.Response) (result TldLegalAgreementCollection, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
