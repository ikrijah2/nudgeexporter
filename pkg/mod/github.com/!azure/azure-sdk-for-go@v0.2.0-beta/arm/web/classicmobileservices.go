package web

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 0.12.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"net/http"
	"net/url"
)

// ClassicMobileServicesSiteManagementClient is the use these APIs to manage
// Azure Websites resources through the Azure Resource Manager. All task
// operations conform to the HTTP/1.1 protocol specification and each
// operation returns an x-ms-request-id header that can be used to obtain
// information about the request. You must make sure that requests made to
// these resources are secure. For more information, see <a
// href="https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx">Authenticating
// Azure Resource Manager requests.</a>
type ClassicMobileServicesSiteManagementClient struct {
	SiteManagementClient
}

// NewClassicMobileServicesSiteManagementClient creates an instance of the
// ClassicMobileServicesSiteManagementClient client.
func NewClassicMobileServicesSiteManagementClient(subscriptionID string) ClassicMobileServicesSiteManagementClient {
	return NewClassicMobileServicesSiteManagementClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewClassicMobileServicesSiteManagementClientWithBaseURI creates an instance
// of the ClassicMobileServicesSiteManagementClient client.
func NewClassicMobileServicesSiteManagementClientWithBaseURI(baseURI string, subscriptionID string) ClassicMobileServicesSiteManagementClient {
	return ClassicMobileServicesSiteManagementClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// DeleteClassicMobileService sends the delete classic mobile service request.
//
// resourceGroupName is name of resource group name is name of mobile service
func (client ClassicMobileServicesSiteManagementClient) DeleteClassicMobileService(resourceGroupName string, name string) (result ObjectSet, ae error) {
	req, err := client.DeleteClassicMobileServicePreparer(resourceGroupName, name)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "web/ClassicMobileServicesSiteManagementClient", "DeleteClassicMobileService", "Failure preparing request")
	}

	resp, err := client.DeleteClassicMobileServiceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "web/ClassicMobileServicesSiteManagementClient", "DeleteClassicMobileService", "Failure sending request")
	}

	result, err = client.DeleteClassicMobileServiceResponder(resp)
	if err != nil {
		ae = autorest.NewErrorWithError(err, "web/ClassicMobileServicesSiteManagementClient", "DeleteClassicMobileService", "Failure responding to request")
	}

	return
}

// DeleteClassicMobileServicePreparer prepares the DeleteClassicMobileService request.
func (client ClassicMobileServicesSiteManagementClient) DeleteClassicMobileServicePreparer(resourceGroupName string, name string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"name":              url.QueryEscape(name),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionID),
	}

	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}"),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters))
}

// DeleteClassicMobileServiceSender sends the DeleteClassicMobileService request. The method will close the
// http.Response Body if it receives an error.
func (client ClassicMobileServicesSiteManagementClient) DeleteClassicMobileServiceSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, http.StatusOK)
}

// DeleteClassicMobileServiceResponder handles the response to the DeleteClassicMobileService request. The method always
// closes the http.Response Body.
func (client ClassicMobileServicesSiteManagementClient) DeleteClassicMobileServiceResponder(resp *http.Response) (result ObjectSet, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetClassicMobileService sends the get classic mobile service request.
//
// resourceGroupName is name of resource group name is name of mobile service
func (client ClassicMobileServicesSiteManagementClient) GetClassicMobileService(resourceGroupName string, name string) (result ClassicMobileService, ae error) {
	req, err := client.GetClassicMobileServicePreparer(resourceGroupName, name)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "web/ClassicMobileServicesSiteManagementClient", "GetClassicMobileService", "Failure preparing request")
	}

	resp, err := client.GetClassicMobileServiceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "web/ClassicMobileServicesSiteManagementClient", "GetClassicMobileService", "Failure sending request")
	}

	result, err = client.GetClassicMobileServiceResponder(resp)
	if err != nil {
		ae = autorest.NewErrorWithError(err, "web/ClassicMobileServicesSiteManagementClient", "GetClassicMobileService", "Failure responding to request")
	}

	return
}

// GetClassicMobileServicePreparer prepares the GetClassicMobileService request.
func (client ClassicMobileServicesSiteManagementClient) GetClassicMobileServicePreparer(resourceGroupName string, name string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"name":              url.QueryEscape(name),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionID),
	}

	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}"),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters))
}

// GetClassicMobileServiceSender sends the GetClassicMobileService request. The method will close the
// http.Response Body if it receives an error.
func (client ClassicMobileServicesSiteManagementClient) GetClassicMobileServiceSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, http.StatusOK)
}

// GetClassicMobileServiceResponder handles the response to the GetClassicMobileService request. The method always
// closes the http.Response Body.
func (client ClassicMobileServicesSiteManagementClient) GetClassicMobileServiceResponder(resp *http.Response) (result ClassicMobileService, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetClassicMobileServices sends the get classic mobile services request.
//
// resourceGroupName is name of resource group
func (client ClassicMobileServicesSiteManagementClient) GetClassicMobileServices(resourceGroupName string) (result ClassicMobileServiceCollection, ae error) {
	req, err := client.GetClassicMobileServicesPreparer(resourceGroupName)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "web/ClassicMobileServicesSiteManagementClient", "GetClassicMobileServices", "Failure preparing request")
	}

	resp, err := client.GetClassicMobileServicesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "web/ClassicMobileServicesSiteManagementClient", "GetClassicMobileServices", "Failure sending request")
	}

	result, err = client.GetClassicMobileServicesResponder(resp)
	if err != nil {
		ae = autorest.NewErrorWithError(err, "web/ClassicMobileServicesSiteManagementClient", "GetClassicMobileServices", "Failure responding to request")
	}

	return
}

// GetClassicMobileServicesPreparer prepares the GetClassicMobileServices request.
func (client ClassicMobileServicesSiteManagementClient) GetClassicMobileServicesPreparer(resourceGroupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionID),
	}

	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices"),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters))
}

// GetClassicMobileServicesSender sends the GetClassicMobileServices request. The method will close the
// http.Response Body if it receives an error.
func (client ClassicMobileServicesSiteManagementClient) GetClassicMobileServicesSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, http.StatusOK)
}

// GetClassicMobileServicesResponder handles the response to the GetClassicMobileServices request. The method always
// closes the http.Response Body.
func (client ClassicMobileServicesSiteManagementClient) GetClassicMobileServicesResponder(resp *http.Response) (result ClassicMobileServiceCollection, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
